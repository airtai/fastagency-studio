{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"release/","title":"Release Notes","text":"","boost":2},{"location":"release/#000dev0","title":"0.0.0dev0","text":"<p>Full Changelog: #0.0.0dev0</p> <p>Initial commit</p>","boost":2},{"location":"api/fastagency/auth_token/auth/DeploymentAuthToken/","title":"DeploymentAuthToken","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/DeploymentAuthToken/#fastagency.auth_token.auth.DeploymentAuthToken","title":"fastagency.auth_token.auth.DeploymentAuthToken","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/auth_token/auth/DeploymentAuthToken/#fastagency.auth_token.auth.DeploymentAuthToken.auth_token","title":"auth_token  <code>instance-attribute</code>","text":"<pre><code>auth_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/auth_token/auth/create_deployment_auth_token/","title":"create_deployment_auth_token","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/create_deployment_auth_token/#fastagency.auth_token.auth.create_deployment_auth_token","title":"fastagency.auth_token.auth.create_deployment_auth_token  <code>async</code>","text":"<pre><code>create_deployment_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    name: str = \"Default deployment token\",\n    expiry: str = \"99999d\",\n) -&gt; DeploymentAuthToken\n</code></pre> Source code in <code>fastagency/auth_token/auth.py</code> <pre><code>async def create_deployment_auth_token(\n    user_uuid: Union[str, uuid.UUID],\n    deployment_uuid: Union[str, uuid.UUID],\n    name: str = \"Default deployment token\",\n    expiry: str = \"99999d\",\n) -&gt; DeploymentAuthToken:\n    user = await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n    deployment = await DefaultDB.backend().find_model(model_uuid=deployment_uuid)\n\n    if user[\"uuid\"] != deployment[\"user_uuid\"]:\n        raise HTTPException(\n            status_code=403, detail=\"User does not have access to this deployment\"\n        )\n    expires_at = await parse_expiry(expiry)\n\n    auth_token = generate_auth_token()\n    hashed_token = hash_auth_token(auth_token)\n\n    await DefaultDB.backend().create_auth_token(\n        auth_token_uuid=uuid.uuid4(),\n        name=name,\n        user_uuid=user_uuid,\n        deployment_uuid=deployment_uuid,\n        hashed_auth_token=hashed_token,\n        expiry=expiry,\n        expires_at=expires_at,\n    )\n\n    return DeploymentAuthToken(auth_token=auth_token)\n</code></pre>","boost":0.5},{"location":"api/fastagency/auth_token/auth/generate_auth_token/","title":"generate_auth_token","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/generate_auth_token/#fastagency.auth_token.auth.generate_auth_token","title":"fastagency.auth_token.auth.generate_auth_token","text":"<pre><code>generate_auth_token(length: int = 32) -&gt; str\n</code></pre> Source code in <code>fastagency/auth_token/auth.py</code> <pre><code>def generate_auth_token(length: int = 32) -&gt; str:\n    characters = string.ascii_letters + string.digits\n    token = \"\".join(secrets.choice(characters) for _ in range(length))\n    return token\n</code></pre>","boost":0.5},{"location":"api/fastagency/auth_token/auth/hash_auth_token/","title":"hash_auth_token","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/hash_auth_token/#fastagency.auth_token.auth.hash_auth_token","title":"fastagency.auth_token.auth.hash_auth_token","text":"<pre><code>hash_auth_token(token: str) -&gt; str\n</code></pre> Source code in <code>fastagency/auth_token/auth.py</code> <pre><code>def hash_auth_token(token: str) -&gt; str:\n    # Generate a random salt\n    salt = secrets.token_bytes(16)\n\n    # Combine salt and token\n    salted_token = salt + token.encode(\"utf-8\")\n\n    # Use SHA-256 for hashing\n    hashed_token = hashlib.sha256(salted_token).hexdigest()\n\n    # Return the salt and hashed token\n    return salt.hex() + \":\" + hashed_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/auth_token/auth/parse_expiry/","title":"parse_expiry","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/parse_expiry/#fastagency.auth_token.auth.parse_expiry","title":"fastagency.auth_token.auth.parse_expiry  <code>async</code>","text":"<pre><code>parse_expiry(expiry: str) -&gt; datetime\n</code></pre> Source code in <code>fastagency/auth_token/auth.py</code> <pre><code>async def parse_expiry(expiry: str) -&gt; datetime:\n    match = re.match(r\"(\\d+)([d])\", expiry)\n    if not match:\n        raise HTTPException(\n            status_code=400,\n            detail=f\"Invalid expiry format - {expiry}; expected format: &lt;number&gt;d\",\n        )\n\n    value, unit = match.groups()\n    value = int(value)\n\n    td = timedelta(days=value)\n\n    d = datetime.utcnow()\n    expires_at = d + td\n    if expires_at &lt;= d:\n        raise HTTPException(status_code=400, detail=\"Expiry date cannot be in the past\")\n    return expires_at\n</code></pre>","boost":0.5},{"location":"api/fastagency/auth_token/auth/verify_auth_token/","title":"verify_auth_token","text":"","boost":0.5},{"location":"api/fastagency/auth_token/auth/verify_auth_token/#fastagency.auth_token.auth.verify_auth_token","title":"fastagency.auth_token.auth.verify_auth_token","text":"<pre><code>verify_auth_token(token: str, stored_hash: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/auth_token/auth.py</code> <pre><code>def verify_auth_token(token: str, stored_hash: str) -&gt; bool:\n    if \":\" not in stored_hash:\n        return False\n    # Split the stored hash into salt and hash\n    salt, hash_value = stored_hash.split(\":\")\n\n    # Convert salt back to bytes\n    salt_bytes = bytes.fromhex(salt)\n\n    # Combine salt and token\n    salted_token = salt_bytes + token.encode(\"utf-8\")\n\n    # Hash the salted token\n    computed_hash = hashlib.sha256(salted_token).hexdigest()\n\n    # Compare the computed hash with the stored hash\n    return computed_hash == hash_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/","title":"BackendDBProtocol","text":"","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol","title":"fastagency.db.base.BackendDBProtocol","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.create_auth_token","title":"create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def create_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def create_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.delete_auth_token","title":"delete_auth_token  <code>async</code>","text":"<pre><code>delete_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def delete_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    model_uuid: Union[str, UUID]\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def delete_model(self, model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.find_many_auth_token","title":"find_many_auth_token  <code>async</code>","text":"<pre><code>find_many_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def find_many_auth_token(\n    self, user_uuid: Union[str, UUID], deployment_uuid: Union[str, UUID]\n) -&gt; List[Dict[str, Any]]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.find_many_model","title":"find_many_model  <code>async</code>","text":"<pre><code>find_many_model(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def find_many_model(\n    self, user_uuid: Union[str, UUID], type_name: Optional[str] = None\n) -&gt; List[Dict[str, Any]]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.find_model","title":"find_model  <code>async</code>","text":"<pre><code>find_model(model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def find_model(self, model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/BackendDBProtocol/#fastagency.db.base.BackendDBProtocol.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def update_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/DefaultDB/","title":"DefaultDB","text":"","boost":0.5},{"location":"api/fastagency/db/base/DefaultDB/#fastagency.db.base.DefaultDB","title":"fastagency.db.base.DefaultDB","text":"","boost":0.5},{"location":"api/fastagency/db/base/DefaultDB/#fastagency.db.base.DefaultDB.backend","title":"backend  <code>staticmethod</code>","text":"<pre><code>backend() -&gt; BackendDBProtocol\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>@staticmethod\ndef backend() -&gt; BackendDBProtocol:\n    return DefaultDB._backend_db  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/DefaultDB/#fastagency.db.base.DefaultDB.frontend","title":"frontend  <code>staticmethod</code>","text":"<pre><code>frontend() -&gt; FrontendDBProtocol\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>@staticmethod\ndef frontend() -&gt; FrontendDBProtocol:\n    return DefaultDB._frontend_db  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/DefaultDB/#fastagency.db.base.DefaultDB.set","title":"set  <code>staticmethod</code>","text":"<pre><code>set(\n    *,\n    backend_db: BackendDBProtocol,\n    frontend_db: FrontendDBProtocol\n) -&gt; Generator[None, None, None]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>@staticmethod\n@contextmanager\ndef set(\n    *,\n    backend_db: BackendDBProtocol,\n    frontend_db: FrontendDBProtocol,\n) -&gt; Generator[None, None, None]:\n    old_backend_default = DefaultDB._backend_db\n    old_frontend_default = DefaultDB._frontend_db\n    try:\n        DefaultDB._backend_db = backend_db\n        DefaultDB._frontend_db = frontend_db\n        yield\n    finally:\n        DefaultDB._backend_db = old_backend_default\n        DefaultDB._frontend_db = old_frontend_default\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/FrontendDBProtocol/","title":"FrontendDBProtocol","text":"","boost":0.5},{"location":"api/fastagency/db/base/FrontendDBProtocol/#fastagency.db.base.FrontendDBProtocol","title":"fastagency.db.base.FrontendDBProtocol","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/db/base/FrontendDBProtocol/#fastagency.db.base.FrontendDBProtocol.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_uuid: Union[str, UUID]) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/base.py</code> <pre><code>async def get_user(self, user_uuid: Union[str, UUID]) -&gt; Dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/base/KeyExistsError/","title":"KeyExistsError","text":"","boost":0.5},{"location":"api/fastagency/db/base/KeyExistsError/#fastagency.db.base.KeyExistsError","title":"fastagency.db.base.KeyExistsError","text":"<p>               Bases: <code>ValueError</code></p>","boost":0.5},{"location":"api/fastagency/db/base/KeyNotFoundError/","title":"KeyNotFoundError","text":"","boost":0.5},{"location":"api/fastagency/db/base/KeyNotFoundError/#fastagency.db.base.KeyNotFoundError","title":"fastagency.db.base.KeyNotFoundError","text":"<p>               Bases: <code>ValueError</code></p>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/","title":"InMemoryBackendDB","text":"","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB","title":"fastagency.db.inmemory.InMemoryBackendDB","text":"<pre><code>InMemoryBackendDB()\n</code></pre> <p>               Bases: <code>BackendDBProtocol</code></p> <p>In memory backend database.</p> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"In memory backend database.\"\"\"\n    self._models: List[Dict[str, Any]] = []\n    self._auth_tokens: List[Dict[str, Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.create_auth_token","title":"create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def create_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; Dict[str, Any]:\n    auth_token = {\n        \"uuid\": str(auth_token_uuid),\n        \"name\": name,\n        \"user_uuid\": str(user_uuid),\n        \"deployment_uuid\": str(deployment_uuid),\n        \"hashed_auth_token\": hashed_auth_token,\n        \"expiry\": expiry,\n        \"expires_at\": expires_at,\n        \"created_at\": datetime.now(),\n        \"updated_at\": datetime.now(),\n    }\n    self._auth_tokens.append(auth_token)\n    return auth_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def create_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]:\n    model = {\n        \"uuid\": str(model_uuid),\n        \"user_uuid\": str(user_uuid),\n        \"type_name\": type_name,\n        \"model_name\": model_name,\n        \"json_str\": json.loads(json_str),\n        \"created_at\": datetime.now(),\n        \"updated_at\": datetime.now(),\n    }\n    self._models.append(model)\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.delete_auth_token","title":"delete_auth_token  <code>async</code>","text":"<pre><code>delete_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def delete_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; Dict[str, Any]:\n    for auth_token in self._auth_tokens:\n        if (\n            auth_token[\"uuid\"] == str(auth_token_uuid)\n            and auth_token[\"user_uuid\"] == str(user_uuid)\n            and auth_token[\"deployment_uuid\"] == str(deployment_uuid)\n        ):\n            self._auth_tokens.remove(auth_token)\n            return auth_token\n    raise KeyNotFoundError(f\"auth_token_uuid {auth_token_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    model_uuid: Union[str, UUID]\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def delete_model(self, model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            self._models.remove(model)\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.find_many_auth_token","title":"find_many_auth_token  <code>async</code>","text":"<pre><code>find_many_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def find_many_auth_token(\n    self, user_uuid: Union[str, UUID], deployment_uuid: Union[str, UUID]\n) -&gt; List[Dict[str, Any]]:\n    return [\n        auth_token\n        for auth_token in self._auth_tokens\n        if auth_token[\"user_uuid\"] == str(user_uuid)\n        and auth_token[\"deployment_uuid\"] == str(deployment_uuid)\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.find_many_model","title":"find_many_model  <code>async</code>","text":"<pre><code>find_many_model(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def find_many_model(\n    self, user_uuid: Union[str, UUID], type_name: Optional[str] = None\n) -&gt; List[Dict[str, Any]]:\n    return [model for model in self._models if model[\"user_uuid\"] == str(user_uuid)]\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.find_model","title":"find_model  <code>async</code>","text":"<pre><code>find_model(model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def find_model(self, model_uuid: Union[str, UUID]) -&gt; Dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryBackendDB/#fastagency.db.inmemory.InMemoryBackendDB.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def update_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; Dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            model[\"type_name\"] = type_name\n            model[\"model_name\"] = model_name\n            model[\"json_str\"] = json.loads(json_str)\n            model[\"updated_at\"] = datetime.now()\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryFrontendDB/","title":"InMemoryFrontendDB","text":"","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryFrontendDB/#fastagency.db.inmemory.InMemoryFrontendDB","title":"fastagency.db.inmemory.InMemoryFrontendDB","text":"<pre><code>InMemoryFrontendDB()\n</code></pre> <p>               Bases: <code>FrontendDBProtocol</code></p> <p>In memory frontend database.</p> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"In memory frontend database.\"\"\"\n    self._users: List[Dict[str, Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/db/inmemory/InMemoryFrontendDB/#fastagency.db.inmemory.InMemoryFrontendDB.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_uuid: Union[str, UUID]) -&gt; Any\n</code></pre> Source code in <code>fastagency/db/inmemory.py</code> <pre><code>async def get_user(self, user_uuid: Union[str, UUID]) -&gt; Any:\n    for user in self._users:\n        if user[\"uuid\"] == str(user_uuid):\n            return user\n    raise KeyNotFoundError(f\"user_uuid {user_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/faststream_app/ping_handler/","title":"ping_handler","text":"","boost":0.5},{"location":"api/fastagency/faststream_app/ping_handler/#fastagency.faststream_app.ping_handler","title":"fastagency.faststream_app.ping_handler  <code>async</code>","text":"<pre><code>ping_handler(\n    body: Dict[str, Any], msg: NatsMessage, logger: Logger\n) -&gt; None\n</code></pre> Source code in <code>fastagency/faststream_app.py</code> <pre><code>async def ping_handler(body: Dict[str, Any], msg: NatsMessage, logger: Logger) -&gt; None:\n    raw_message = msg.raw_message\n\n    subject = raw_message.subject\n    client_id = subject.split(\".\")[1]\n    reply_subject = raw_message.reply\n\n    await msg.ack()\n    logger.info(\n        f\"Received a message on '{subject=} {reply_subject=}': {body=} -&gt; from {process_id=}\"\n    )\n\n    if \"msg\" not in body or body[\"msg\"].lower() != \"ping\":\n        reply_msg = f\"Unkown message: {body}, please send 'ping' in body['msg']\"\n    else:\n        reply_msg = \"pong\"\n\n    reply = {\n        \"msg\": reply_msg,\n        \"process_id\": process_id,\n    }\n    await broker.publish(json.dumps(reply), f\"pong.{client_id}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/add_model_to_user/","title":"add_model_to_user","text":"","boost":0.5},{"location":"api/fastagency/helpers/add_model_to_user/#fastagency.helpers.add_model_to_user","title":"fastagency.helpers.add_model_to_user  <code>async</code>","text":"<pre><code>add_model_to_user(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: Dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def add_model_to_user(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: Dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; Dict[str, Any]:\n    try:\n        registry = Registry.get_default()\n        validated_model = registry.validate(type_name, model_name, model)\n\n        validated_model_dict = validated_model.model_dump()\n        validated_model_json = validated_model.model_dump_json()\n        saas_app = None\n\n        if type_name == \"deployment\":\n            saas_app = await validate_tokens_and_create_gh_repo(\n                validated_model_dict, model_uuid\n            )\n\n            validated_model_dict[\"app_deploy_status\"] = \"inprogress\"\n            validated_model_dict[\"gh_repo_url\"] = saas_app.gh_repo_url\n\n            updated_validated_model_dict = json.loads(validated_model_json)\n            updated_validated_model_dict[\"app_deploy_status\"] = \"inprogress\"\n            updated_validated_model_dict[\"gh_repo_url\"] = saas_app.gh_repo_url\n            validated_model_json = json.dumps(updated_validated_model_dict)\n\n        await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n        await DefaultDB.backend().create_model(\n            model_uuid=model_uuid,\n            user_uuid=user_uuid,\n            type_name=type_name,\n            model_name=model_name,\n            json_str=validated_model_json,\n        )\n\n        if saas_app is not None:\n            background_tasks.add_task(\n                deploy_saas_app,\n                saas_app,\n                user_uuid,\n                model_uuid,\n                type_name,\n                model_name,\n            )\n\n        return validated_model_dict\n\n    except InvalidGHTokenError as e:\n        raise HTTPException(status_code=422, detail=str(e)) from e\n\n    except InvalidFlyTokenError as e:\n        raise HTTPException(status_code=422, detail=str(e)) from e\n\n    except Exception as e:\n        msg = \"Oops! Something went wrong. Please try again later.\"\n        raise HTTPException(status_code=422, detail=msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/create_autogen/","title":"create_autogen","text":"","boost":0.5},{"location":"api/fastagency/helpers/create_autogen/#fastagency.helpers.create_autogen","title":"fastagency.helpers.create_autogen  <code>async</code>","text":"<pre><code>create_autogen(\n    model_ref: ObjectReference,\n    user_uuid: Union[str, UUID],\n    **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def create_autogen(\n    model_ref: ObjectReference,\n    user_uuid: Union[str, UUID],\n    **kwargs: Any,\n) -&gt; Any:\n    user_id = UUID(user_uuid) if isinstance(user_uuid, str) else user_uuid\n    model_id = (\n        UUID(model_ref.uuid)  # type: ignore[arg-type]\n        if isinstance(model_ref.uuid, str)\n        else model_ref.uuid\n    )\n    model = await get_model_by_ref(model_ref)\n\n    return await model.create_autogen(model_id=model_id, user_id=user_id, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/create_model/","title":"create_model","text":"","boost":0.5},{"location":"api/fastagency/helpers/create_model/#fastagency.helpers.create_model","title":"fastagency.helpers.create_model  <code>async</code>","text":"<pre><code>create_model(\n    cls: Type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any\n) -&gt; Tuple[UUID, Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def create_model(\n    cls: Type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any,\n) -&gt; Tuple[UUID, Dict[str, Any]]:\n    model = cls(**kwargs)\n    model_uuid = uuid.uuid4()\n\n    validated_model = await add_model_to_user(\n        user_uuid=str(user_uuid),\n        type_name=type_name,\n        model_name=cls.__name__,  # type: ignore [attr-defined]\n        model_uuid=str(model_uuid),\n        model=model.model_dump(),\n        background_tasks=background_tasks,  # type: ignore[arg-type]\n    )\n    return model_uuid, validated_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/create_model_ref/","title":"create_model_ref","text":"","boost":0.5},{"location":"api/fastagency/helpers/create_model_ref/#fastagency.helpers.create_model_ref","title":"fastagency.helpers.create_model_ref  <code>async</code>","text":"<pre><code>create_model_ref(\n    cls: Type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any\n) -&gt; ObjectReference\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def create_model_ref(\n    cls: Type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any,\n) -&gt; ObjectReference:\n    model_uuid, _ = await create_model(\n        cls,\n        type_name,\n        user_uuid,\n        background_tasks,\n        **kwargs,\n    )\n\n    model_ref = cls.get_reference_model()(uuid=model_uuid)\n\n    return model_ref\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/deploy_saas_app/","title":"deploy_saas_app","text":"","boost":0.5},{"location":"api/fastagency/helpers/deploy_saas_app/#fastagency.helpers.deploy_saas_app","title":"fastagency.helpers.deploy_saas_app  <code>async</code>","text":"<pre><code>deploy_saas_app(\n    saas_app: SaasAppGenerator,\n    user_uuid: str,\n    model_uuid: str,\n    type_name: str,\n    model_name: str,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def deploy_saas_app(\n    saas_app: SaasAppGenerator,\n    user_uuid: str,\n    model_uuid: str,\n    type_name: str,\n    model_name: str,\n) -&gt; None:\n    deployment_auth_token = await create_deployment_auth_token(user_uuid, model_uuid)\n    saas_app.deployment_auth_token = deployment_auth_token.auth_token\n    saas_app.developer_uuid = user_uuid\n\n    await asyncify(saas_app.execute)()\n\n    found_model = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n    found_model[\"json_str\"][\"app_deploy_status\"] = \"completed\"\n    await DefaultDB.backend().update_model(\n        model_uuid=found_model[\"uuid\"],\n        user_uuid=user_uuid,\n        type_name=type_name,\n        model_name=model_name,\n        json_str=json.dumps(found_model[\"json_str\"]),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/get_all_models_for_user/","title":"get_all_models_for_user","text":"","boost":0.5},{"location":"api/fastagency/helpers/get_all_models_for_user/#fastagency.helpers.get_all_models_for_user","title":"fastagency.helpers.get_all_models_for_user  <code>async</code>","text":"<pre><code>get_all_models_for_user(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def get_all_models_for_user(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; List[Dict[str, Any]]:\n    models = await DefaultDB.backend().find_many_model(\n        user_uuid=user_uuid, type_name=type_name\n    )\n\n    return models  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/get_model_by_ref/","title":"get_model_by_ref","text":"","boost":0.5},{"location":"api/fastagency/helpers/get_model_by_ref/#fastagency.helpers.get_model_by_ref","title":"fastagency.helpers.get_model_by_ref  <code>async</code>","text":"<pre><code>get_model_by_ref(model_ref: ObjectReference) -&gt; Model\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def get_model_by_ref(model_ref: ObjectReference) -&gt; Model:\n    return await get_model_by_uuid(model_ref.uuid)\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/get_model_by_uuid/","title":"get_model_by_uuid","text":"","boost":0.5},{"location":"api/fastagency/helpers/get_model_by_uuid/#fastagency.helpers.get_model_by_uuid","title":"fastagency.helpers.get_model_by_uuid  <code>async</code>","text":"<pre><code>get_model_by_uuid(model_uuid: Union[str, UUID]) -&gt; Model\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def get_model_by_uuid(model_uuid: Union[str, UUID]) -&gt; Model:\n    model_dict = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n\n    registry = Registry.get_default()\n    model = registry.validate(\n        type=model_dict[\"type_name\"],\n        name=model_dict[\"model_name\"],\n        model=model_dict[\"json_str\"],\n    )\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/helpers/validate_tokens_and_create_gh_repo/","title":"validate_tokens_and_create_gh_repo","text":"","boost":0.5},{"location":"api/fastagency/helpers/validate_tokens_and_create_gh_repo/#fastagency.helpers.validate_tokens_and_create_gh_repo","title":"fastagency.helpers.validate_tokens_and_create_gh_repo  <code>async</code>","text":"<pre><code>validate_tokens_and_create_gh_repo(\n    model: Dict[str, Any], model_uuid: str\n) -&gt; SaasAppGenerator\n</code></pre> Source code in <code>fastagency/helpers.py</code> <pre><code>async def validate_tokens_and_create_gh_repo(\n    model: Dict[str, Any],\n    model_uuid: str,\n) -&gt; SaasAppGenerator:\n    found_gh_token = await DefaultDB.backend().find_model(\n        model_uuid=model[\"gh_token\"][\"uuid\"]\n    )\n    found_fly_token = await DefaultDB.backend().find_model(\n        model_uuid=model[\"fly_token\"][\"uuid\"]\n    )\n\n    found_gh_token_uuid = found_gh_token[\"json_str\"][\"gh_token\"]\n    found_fly_token_uuid = found_fly_token[\"json_str\"][\"fly_token\"]\n\n    saas_app = SaasAppGenerator(\n        fly_api_token=found_fly_token_uuid,\n        github_token=found_gh_token_uuid,\n        app_name=model[\"name\"],\n        repo_name=model[\"repo_name\"],\n        fly_app_name=model[\"fly_app_name\"],\n        fastagency_deployment_uuid=model_uuid,\n    )\n\n    saas_app.validate_tokens()\n    saas_app.create_new_repository()\n    return saas_app\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry","title":"fastagency.models.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(\n    type_name: str, model_name: str\n) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; Type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; List[Type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; List[Type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: Type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schema(self, model: Type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [\n        self.get_model_schema(model)  # type: ignore[arg-type]\n        for _, (model, _) in models.items()\n    ]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_models_refs_by_type","title":"get_models_refs_by_type","text":"<pre><code>get_models_refs_by_type(\n    type: str,\n) -&gt; List[Type[ObjectReference]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_models_refs_by_type(self, type: str) -&gt; List[Type[ObjectReference]]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n\n    return [ref for _, ref in models.values()]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: Type[M]) -&gt; Type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: Type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model\n\n        model._reference_model = reference_model\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.validate","title":"validate","text":"<pre><code>validate(\n    type: str, name: str, model: Dict[str, Any]\n) -&gt; Model\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: Dict[str, Any]) -&gt; Model:\n    model_type = self.get_model_type(type, name)\n    return model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/","title":"AssistantAgent","text":"","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent","title":"fastagency.models.agents.assistant.AssistantAgent","text":"<p>               Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.system_message","title":"system_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_message: str = (\n    \"You are a helpful assistant. After you successfully answer all questions and there are no new questions asked after your response (e.g. there is no specific direction or question asked after you give a response), terminate the chat by outputting 'TERMINATE'\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[AssistantAgent, List[Client]]\n</code></pre> Source code in <code>fastagency/models/agents/assistant.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[autogen.agentchat.AssistantAgent, List[Client]]:\n    my_model = await cls.from_db(model_id)\n\n    llm_model = await my_model.llm.get_data_model().from_db(my_model.llm.uuid)\n\n    llm = await llm_model.create_autogen(my_model.llm.uuid, user_id)\n\n    clients = await my_model.get_clients_from_toolboxes(user_id)\n\n    agent_name = my_model.name\n\n    if \"human_input_mode\" in kwargs:\n        kwargs.pop(\"human_input_mode\")\n\n    if \"system_message\" in kwargs:\n        system_message = kwargs[\"system_message\"]\n        kwargs.pop(\"system_message\")\n    else:\n        system_message = my_model.system_message\n\n    agent = autogen.agentchat.AssistantAgent(\n        name=agent_name,\n        llm_config=llm,\n        system_message=system_message,\n        code_execution_config=False,\n        **kwargs,\n    )\n    return agent, clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; List[Client]\n</code></pre> Source code in <code>fastagency/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; List[Client]:\n    clients: List[Client] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/","title":"AgentBaseModel","text":"","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel","title":"fastagency.models.agents.base.AgentBaseModel","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; List[Client]\n</code></pre> Source code in <code>fastagency/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; List[Client]:\n    clients: List[Client] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/base/AgentBaseModel/#fastagency.models.agents.base.AgentBaseModel.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/","title":"UserProxyAgent","text":"","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent","title":"fastagency.models.agents.user_proxy.UserProxyAgent","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply: Optional[int] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[AssistantAgent, List[Client]]\n</code></pre> Source code in <code>fastagency/models/agents/user_proxy.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[autogen.agentchat.AssistantAgent, List[Client]]:\n    my_model = await cls.from_db(model_id)\n\n    agent_name = my_model.name\n\n    agent = autogen.agentchat.UserProxyAgent(\n        name=agent_name,\n        max_consecutive_auto_reply=my_model.max_consecutive_auto_reply,\n        code_execution_config=False,\n        **kwargs,\n    )\n    return agent, []\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/user_proxy/UserProxyAgent/#fastagency.models.agents.user_proxy.UserProxyAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/","title":"BingAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey","title":"fastagency.models.agents.web_surfer.BingAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/BingAPIKey/#fastagency.models.agents.web_surfer.BingAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/","title":"WebSurferAgent","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent","title":"fastagency.models.agents.web_surfer.WebSurferAgent","text":"<p>               Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.bing_api_key","title":"bing_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bing_api_key: Optional[BingAPIKeyRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.summarizer_llm","title":"summarizer_llm  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.viewport_size","title":"viewport_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>viewport_size: int = 4096\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[AssistantAgent, List[WebSurferToolbox]]\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[AutoGenAssistantAgent, List[WebSurferToolbox]]:\n    from ...helpers import create_autogen, get_model_by_uuid\n\n    websurfer_model: WebSurferAgent = await get_model_by_uuid(model_id)  # type: ignore [assignment]\n    llm_config = await create_autogen(websurfer_model.llm, user_id)\n    summarizer_llm_config = await create_autogen(\n        websurfer_model.summarizer_llm, user_id\n    )\n\n    bing_api_key = (\n        await create_autogen(websurfer_model.bing_api_key, user_id)\n        if websurfer_model.bing_api_key\n        else None\n    )\n\n    viewport_size = websurfer_model.viewport_size\n\n    websurfer_chat = WebSurferChat(\n        name_prefix=websurfer_model.name,\n        llm_config=llm_config,\n        summarizer_llm_config=summarizer_llm_config,\n        viewport_size=viewport_size,\n        bing_api_key=bing_api_key,\n    )\n\n    web_surfer_toolbox = WebSurferToolbox(websurfer_chat)\n\n    agent_name = websurfer_model.name\n\n    system_message = (\n        \"You are a helpful assistent with access to web surfing capabilities.\"\n        \"Please use 'create_new_task' and 'continue_task_with_additional_instructions' functions to provide answers to other agents.\"\n    )\n\n    agent = AutoGenAssistantAgent(\n        name=agent_name,\n        llm_config=llm_config,\n        system_message=system_message,\n        code_execution_config=False,\n        **kwargs,\n    )\n\n    return agent, [web_surfer_toolbox]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; List[Client]\n</code></pre> Source code in <code>fastagency/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; List[Client]:\n    clients: List[Client] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/","title":"WebSurferToolbox","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/#fastagency.models.agents.web_surfer.WebSurferToolbox","title":"fastagency.models.agents.web_surfer.WebSurferToolbox","text":"<pre><code>WebSurferToolbox(websurfer_chat: WebSurferChat)\n</code></pre> <p>Create a toolbox for the web surfer agent. This toolbox will contain functions to delegate web surfing tasks to the internal web surfer agent.</p> PARAMETER DESCRIPTION <code>websurfer_chat</code> <p>The web surfer chat agent</p> <p> TYPE: <code>WebSurferChat</code> </p> Source code in <code>fastagency/models/agents/web_surfer.py</code> <pre><code>def __init__(self, websurfer_chat: WebSurferChat):\n    \"\"\"Create a toolbox for the web surfer agent. This toolbox will contain functions to delegate web surfing tasks to the internal web surfer agent.\n\n    Args:\n        websurfer_chat (WebSurferChat): The web surfer chat agent\n    \"\"\"\n    self.websurfer_chat = websurfer_chat\n\n    def create_new_task(\n        task: Annotated[str, \"task for websurfer\"],\n    ) -&gt; str:\n        try:\n            return syncify(self.websurfer_chat.create_new_task)(task)\n        except Exception as e:\n            raise e\n\n    create_new_task._description = (  # type: ignore [attr-defined]\n        \"Delegate web surfing task to internal web surfer agent\"\n    )\n\n    def continue_task_with_additional_instructions(\n        message: Annotated[\n            str,\n            \"Additional instructions for the task after receiving the initial answer\",\n        ],\n    ) -&gt; str:\n        try:\n            return syncify(\n                self.websurfer_chat.continue_task_with_additional_instructions\n            )(message)\n        except Exception as e:\n            raise e\n\n    continue_task_with_additional_instructions._description = (  # type: ignore [attr-defined]\n        \"Continue the task with additional instructions\"\n    )\n\n    self.registered_funcs = [\n        create_new_task,\n        continue_task_with_additional_instructions,\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/#fastagency.models.agents.web_surfer.WebSurferToolbox.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs = [\n    create_new_task,\n    continue_task_with_additional_instructions,\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/#fastagency.models.agents.web_surfer.WebSurferToolbox.websurfer_chat","title":"websurfer_chat  <code>instance-attribute</code>","text":"<pre><code>websurfer_chat = websurfer_chat\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/#fastagency.models.agents.web_surfer.WebSurferToolbox.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer.py</code> <pre><code>def register_for_execution(self, agent: AutoGenConversableAgent) -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferToolbox/#fastagency.models.agents.web_surfer.WebSurferToolbox.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer.py</code> <pre><code>def register_for_llm(self, agent: AutoGenConversableAgent) -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/","title":"WebSurferAnswer","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer","title":"fastagency.models.agents.web_surfer_autogen.WebSurferAnswer","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.is_successful","title":"is_successful  <code>instance-attribute</code>","text":"<pre><code>is_successful: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.long_answer","title":"long_answer  <code>instance-attribute</code>","text":"<pre><code>long_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.short_answer","title":"short_answer  <code>instance-attribute</code>","text":"<pre><code>short_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.visited_links","title":"visited_links  <code>instance-attribute</code>","text":"<pre><code>visited_links: List[HttpUrl]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.models.agents.web_surfer_autogen.WebSurferAnswer.get_example_answer","title":"get_example_answer  <code>staticmethod</code>","text":"<pre><code>get_example_answer() -&gt; WebSurferAnswer\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>@staticmethod\ndef get_example_answer() -&gt; \"WebSurferAnswer\":\n    return WebSurferAnswer(\n        task=\"What is the most popular QLED TV to buy on amazon.com?\",\n        is_successful=True,\n        short_answer='Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV',\n        long_answer='Amazon has the best selling page by different categories and there is a category for QLED TVs under electroincs. The most popular QLED TV is Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV, Dolby Vision IQ, Fire TV Ambient Experience, local dimming, hands-free with Alexa. It is the best selling QLED TV on Amazon.',\n        visited_links=[\n            \"https://www.amazon.com/Best-Sellers/\",\n            \"https://www.amazon.com/Best-Sellers-Electronics-QLED-TVs/\",\n        ],\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/","title":"WebSurferChat","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat","title":"fastagency.models.agents.web_surfer_autogen.WebSurferChat","text":"<pre><code>WebSurferChat(\n    name_prefix: str,\n    llm_config: Dict[str, Any],\n    summarizer_llm_config: Dict[str, Any],\n    viewport_size: int,\n    bing_api_key: Optional[str],\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Dict[str, Any] = {},\n    assistant_kwargs: Dict[str, Any] = {},\n)\n</code></pre> <p>Create a new WebSurferChat instance.</p> PARAMETER DESCRIPTION <code>name_prefix</code> <p>The name prefix of the inner AutoGen agents</p> <p> TYPE: <code>str</code> </p> <code>llm_config</code> <p>The LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>summarizer_llm_config</code> <p>The summarizer LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>viewport_size</code> <p>The viewport size of the browser</p> <p> TYPE: <code>int</code> </p> <code>bing_api_key</code> <p>The Bing API key for the browser</p> <p> TYPE: <code>Optional[str]</code> </p> <code>max_consecutive_auto_reply</code> <p>The maximum consecutive auto reply. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>max_links_to_click</code> <p>The maximum links to click. Defaults to 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>websurfer_kwargs</code> <p>The keyword arguments for the websurfer. Defaults to {}.</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> <code>assistant_kwargs</code> <p>The keyword arguments for the assistant. Defaults to {}.</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>def __init__(\n    self,\n    name_prefix: str,\n    llm_config: Dict[str, Any],\n    summarizer_llm_config: Dict[str, Any],\n    viewport_size: int,\n    bing_api_key: Optional[str],\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Dict[str, Any] = {},  # noqa: B006\n    assistant_kwargs: Dict[str, Any] = {},  # noqa: B006\n):\n    \"\"\"Create a new WebSurferChat instance.\n\n    Args:\n        name_prefix (str): The name prefix of the inner AutoGen agents\n        llm_config (Dict[str, Any]): The LLM configuration\n        summarizer_llm_config (Dict[str, Any]): The summarizer LLM configuration\n        viewport_size (int): The viewport size of the browser\n        bing_api_key (Optional[str]): The Bing API key for the browser\n        max_consecutive_auto_reply (int, optional): The maximum consecutive auto reply. Defaults to 30.\n        max_links_to_click (int, optional): The maximum links to click. Defaults to 10.\n        websurfer_kwargs (Dict[str, Any], optional): The keyword arguments for the websurfer. Defaults to {}.\n        assistant_kwargs (Dict[str, Any], optional): The keyword arguments for the assistant. Defaults to {}.\n\n    \"\"\"\n    self.name_prefix = name_prefix\n    self.llm_config = llm_config\n    self.summarizer_llm_config = summarizer_llm_config\n    self.viewport_size = viewport_size\n    self.bing_api_key = (\n        bing_api_key if bing_api_key is not None else os.getenv(\"BING_API_KEY\")\n    )\n    self.max_consecutive_auto_reply = max_consecutive_auto_reply\n    self.max_links_to_click = max_links_to_click\n    self.websurfer_kwargs = websurfer_kwargs\n    self.assistant_kwargs = assistant_kwargs\n\n    self.task = \"not set yet\"\n    self.last_is_termination_msg_error = \"\"\n\n    self.browser_config = {\n        \"viewport_size\": self.viewport_size,\n        \"bing_api_key\": self.bing_api_key,\n        \"request_kwargs\": {\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n            }\n        },\n    }\n\n    if \"human_input_mode\" in self.websurfer_kwargs:\n        self.websurfer_kwargs.pop(\"human_input_mode\")\n\n    self.websurfer = AutoGenWebSurferAgent(\n        name=f\"{self.name_prefix}_inner_websurfer\",\n        llm_config=self.llm_config,\n        summarizer_llm_config=self.summarizer_llm_config,\n        browser_config=self.browser_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=self.is_termination_msg,\n        **self.websurfer_kwargs,\n    )\n\n    if \"human_input_mode\" in self.assistant_kwargs:\n        self.assistant_kwargs.pop(\"human_input_mode\")\n\n    self.assistant = AutoGenAssistantAgent(\n        name=f\"{self.name_prefix}_inner_assistant\",\n        llm_config=self.llm_config,\n        human_input_mode=\"NEVER\",\n        system_message=self.system_message,\n        max_consecutive_auto_reply=self.max_consecutive_auto_reply,\n        # is_termination_msg=self.is_termination_msg,\n        **self.assistant_kwargs,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.assistant","title":"assistant  <code>instance-attribute</code>","text":"<pre><code>assistant = AssistantAgent(\n    name=f\"{name_prefix}_inner_assistant\",\n    llm_config=llm_config,\n    human_input_mode=\"NEVER\",\n    system_message=system_message,\n    max_consecutive_auto_reply=max_consecutive_auto_reply,\n    **assistant_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.assistant_kwargs","title":"assistant_kwargs  <code>instance-attribute</code>","text":"<pre><code>assistant_kwargs = assistant_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.bing_api_key","title":"bing_api_key  <code>instance-attribute</code>","text":"<pre><code>bing_api_key = (\n    bing_api_key\n    if bing_api_key is not None\n    else getenv(\"BING_API_KEY\")\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.browser_config","title":"browser_config  <code>instance-attribute</code>","text":"<pre><code>browser_config = {\n    \"viewport_size\": viewport_size,\n    \"bing_api_key\": bing_api_key,\n    \"request_kwargs\": {\n        \"headers\": {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\n        }\n    },\n}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.example_answer","title":"example_answer  <code>property</code>","text":"<pre><code>example_answer: WebSurferAnswer\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.initial_message","title":"initial_message  <code>property</code>","text":"<pre><code>initial_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.last_is_termination_msg_error","title":"last_is_termination_msg_error  <code>instance-attribute</code>","text":"<pre><code>last_is_termination_msg_error = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.llm_config","title":"llm_config  <code>instance-attribute</code>","text":"<pre><code>llm_config = llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply = max_consecutive_auto_reply\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.max_links_to_click","title":"max_links_to_click  <code>instance-attribute</code>","text":"<pre><code>max_links_to_click = max_links_to_click\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.name_prefix","title":"name_prefix  <code>instance-attribute</code>","text":"<pre><code>name_prefix = name_prefix\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.summarizer_llm_config","title":"summarizer_llm_config  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm_config = summarizer_llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.system_message","title":"system_message  <code>property</code>","text":"<pre><code>system_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task = 'not set yet'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.viewport_size","title":"viewport_size  <code>instance-attribute</code>","text":"<pre><code>viewport_size = viewport_size\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.websurfer","title":"websurfer  <code>instance-attribute</code>","text":"<pre><code>websurfer = WebSurferAgent(\n    name=f\"{name_prefix}_inner_websurfer\",\n    llm_config=llm_config,\n    summarizer_llm_config=summarizer_llm_config,\n    browser_config=browser_config,\n    human_input_mode=\"NEVER\",\n    is_termination_msg=is_termination_msg,\n    **websurfer_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.websurfer_kwargs","title":"websurfer_kwargs  <code>instance-attribute</code>","text":"<pre><code>websurfer_kwargs = websurfer_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.continue_task_with_additional_instructions","title":"continue_task_with_additional_instructions  <code>async</code>","text":"<pre><code>continue_task_with_additional_instructions(\n    message: str,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>async def continue_task_with_additional_instructions(self, message: str) -&gt; str:\n    try:\n        answer = await asyncify(self._chat_with_websurfer)(\n            message=message,\n            clear_history=False,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(message, e)\n\n    return self.create_final_reply(message, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.create_final_reply","title":"create_final_reply","text":"<pre><code>create_final_reply(\n    task: str, message: WebSurferAnswer\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>def create_final_reply(self, task: str, message: WebSurferAnswer) -&gt; str:\n    retval = (\n        \"We have successfully completed the task:\\n\\n\"\n        if message.is_successful\n        else \"We have failed to complete the task:\\n\\n\"\n    )\n    retval += f\"{task}\\n\\n\"\n    retval += f\"Short answer: {message.short_answer}\\n\\n\"\n    retval += f\"Explanation: {message.long_answer}\\n\\n\"\n    retval += \"Visited links:\\n\"\n    for link in message.visited_links:\n        retval += f\"  - {link}\\n\"\n\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.create_new_task","title":"create_new_task  <code>async</code>","text":"<pre><code>create_new_task(task: str) -&gt; str\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>async def create_new_task(self, task: str) -&gt; str:\n    self.task = task\n    try:\n        answer = await asyncify(self._chat_with_websurfer)(\n            message=self.initial_message,\n            clear_history=True,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(task, e)\n\n    return self.create_final_reply(task, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.models.agents.web_surfer_autogen.WebSurferChat.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: Dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/models/agents/web_surfer_autogen.py</code> <pre><code>def is_termination_msg(self, msg: Dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg({msg=})\")\n    if (\n        \"content\" in msg\n        and msg[\"content\"] is not None\n        and \"TERMINATE\" in msg[\"content\"]\n    ):\n        return True\n    try:\n        WebSurferAnswer.model_validate_json(msg[\"content\"])\n        return True\n    except Exception as e:\n        self.last_is_termination_msg_error = str(e)\n        return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/Model/","title":"Model","text":"","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model","title":"fastagency.models.base.Model","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/","title":"ModelTypeFinder","text":"","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/#fastagency.models.base.ModelTypeFinder","title":"fastagency.models.base.ModelTypeFinder","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/#fastagency.models.base.ModelTypeFinder.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/","title":"ObjectReference","text":"","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference","title":"fastagency.models.base.ObjectReference","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.check_type","title":"check_type","text":"<pre><code>check_type() -&gt; ObjectReference\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_type(self) -&gt; \"ObjectReference\":\n    if self.type == \"\" or self.name == \"\":\n        raise ValueError(\"type and name must be set\")\n    return self\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(uuid: UUID) -&gt; ObjectReference\n</code></pre> <p>Factory method to create a new instance of the class.</p> <p>This method is used to create a new instance of the class with the given UUID. It is exacly the same as calling <code>ObjectReference(uuid=uuid)</code>, but without type cheching failing because of the missing <code>type</code> and <code>name</code> arguments.</p> PARAMETER DESCRIPTION <code>uuid</code> <p>The unique identifier of the object</p> <p> TYPE: <code>UUID</code> </p> RETURNS DESCRIPTION <code>ObjectReference</code> <p>The new instance of the class</p> <p> TYPE: <code>ObjectReference</code> </p> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef create(cls, uuid: UUID) -&gt; \"ObjectReference\":\n    \"\"\"Factory method to create a new instance of the class.\n\n    This method is used to create a new instance of the class with the given UUID. It\n    is exacly the same as calling `ObjectReference(uuid=uuid)`, but without type\n    cheching failing because of the missing `type` and `name` arguments.\n\n    Args:\n        uuid (UUID): The unique identifier of the object\n\n    Returns:\n        ObjectReference: The new instance of the class\n    \"\"\"\n    return cls(uuid=uuid)  # type: ignore[call-arg]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.get_data_model","title":"get_data_model  <code>classmethod</code>","text":"<pre><code>get_data_model() -&gt; Type[Model]\n</code></pre> <p>Get the data class for the reference.</p> <p>This method returns the data class that is associated with the reference class.</p> RETURNS DESCRIPTION <code>Type[Model]</code> <p>Type[BM]: The data class for the reference</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the data class is not set</p> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_data_model(cls) -&gt; Type[Model]:\n    \"\"\"Get the data class for the reference.\n\n    This method returns the data class that is associated with the reference class.\n\n    Returns:\n        Type[BM]: The data class for the reference\n\n    Raises:\n        ValueError: If the data class is not set\n\n    \"\"\"\n    if cls._data_class is None:\n        raise RuntimeError(\"data class not set\")\n\n    return cls._data_class\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/create_reference_model/","title":"create_reference_model","text":"","boost":0.5},{"location":"api/fastagency/models/base/create_reference_model/#fastagency.models.base.create_reference_model","title":"fastagency.models.base.create_reference_model","text":"<pre><code>create_reference_model(\n    model_class: Optional[Type[M]] = None,\n    *,\n    type_name: str,\n    model_name: Optional[str] = None\n) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def create_reference_model(\n    model_class: Optional[Type[M]] = None,\n    *,\n    type_name: str,\n    model_name: Optional[str] = None,\n) -&gt; Type[ObjectReference]:\n    if model_class is None and model_name is None:\n        raise ValueError(\"Either model_class or model_name should be provided\")\n    if model_class is not None and model_name is not None:\n        raise ValueError(\"Only one of model_class or model_name should be provided\")\n\n    model_type_name = model_class.__name__ if model_class is not None else model_name\n\n    LiteralType: TypeAlias = Literal[type_name]  # type: ignore[valid-type]\n    LiteralModelName: TypeAlias = Literal[model_type_name]  # type: ignore[valid-type]\n\n    reference_model = create_model(\n        f\"{model_type_name}Ref\",\n        type=(\n            Annotated[  # type: ignore[valid-type]\n                LiteralType, Field(description=\"The name of the type of the data\")\n            ],\n            type_name,\n        ),\n        name=(\n            Annotated[LiteralModelName, Field(description=\"The name of the data\")],\n            model_type_name,\n        ),\n        uuid=(\n            Annotated[UUID, Field(description=\"The unique identifier\", title=\"UUID\")],\n            ...,\n        ),\n        __base__=ObjectReference,\n    )\n    reference_model.__module__ = (\n        f\"fastagency.models.{type_name}.{model_type_name}._generated\"\n    )\n\n    reference_model._data_class = model_class  # type: ignore[attr-defined]\n    if model_class is not None:\n        model_class._reference_model = reference_model\n\n    return reference_model  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/get_reference_model/","title":"get_reference_model","text":"","boost":0.5},{"location":"api/fastagency/models/base/get_reference_model/#fastagency.models.base.get_reference_model","title":"fastagency.models.base.get_reference_model","text":"<pre><code>get_reference_model(\n    model: Type[BaseModel],\n) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def get_reference_model(model: Type[BaseModel]) -&gt; Type[ObjectReference]:\n    if issubclass(model, ObjectReference):\n        return model\n    elif hasattr(model, \"_reference_model\"):\n        return model._reference_model  # type: ignore[attr-defined,no-any-return]\n    raise ValueError(f\"Class '{model.__name__}' is not and does not have a reference\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/","title":"Deployment","text":"","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment","title":"fastagency.models.deployments.deployment.Deployment","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.fly_app_name","title":"fly_app_name  <code>instance-attribute</code>","text":"<pre><code>fly_app_name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.fly_token","title":"fly_token  <code>instance-attribute</code>","text":"<pre><code>fly_token: FlyTokenRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.gh_token","title":"gh_token  <code>instance-attribute</code>","text":"<pre><code>gh_token: GitHubTokenRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.repo_name","title":"repo_name  <code>instance-attribute</code>","text":"<pre><code>repo_name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.team","title":"team  <code>instance-attribute</code>","text":"<pre><code>team: team_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/deployments/deployment.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    raise NotImplementedError\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.validate_fly_app_name","title":"validate_fly_app_name  <code>classmethod</code>","text":"<pre><code>validate_fly_app_name(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/deployments/deployment.py</code> <pre><code>@field_validator(\"fly_app_name\")\n@classmethod\ndef validate_fly_app_name(cls: Type[\"Deployment\"], value: Any) -&gt; Any:\n    if not re.match(r\"^[a-zA-Z][a-zA-Z0-9\\- ]*$\", value):\n        raise ValueError(\n            \"Fly.io app name must contain only letters, numbers, spaces, dashes and should not start with a numeric literal. Example of a valid name: my-fly-app\"\n        )\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/deployments/deployment/Deployment/#fastagency.models.deployments.deployment.Deployment.validate_repo_name","title":"validate_repo_name  <code>classmethod</code>","text":"<pre><code>validate_repo_name(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/deployments/deployment.py</code> <pre><code>@field_validator(\"repo_name\")\n@classmethod\ndef validate_repo_name(cls: Type[\"Deployment\"], value: Any) -&gt; Any:\n    if not re.match(r\"^[A-Za-z0-9._-]+$\", value):\n        raise ValueError(\n            \"The repository name can only contain ASCII letters, digits, and the characters ., -, and _. Example of a valid name: my-fa-repo\"\n        )\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/","title":"Anthropic","text":"","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic","title":"fastagency.models.llms.anthropic.Anthropic","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: AnthropicAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['anthropic'] = 'anthropic'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.anthropic.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: AnthropicModels = 'claude-3-5-sonnet-20240620'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/models/llms/anthropic.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]:\n    my_model: Anthropic = await cls.from_db(model_id)\n\n    api_key_model: AnthropicAPIKey = (\n        await my_model.api_key.get_data_model().from_db(my_model.api_key.uuid)\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/Anthropic/#fastagency.models.llms.anthropic.Anthropic.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/","title":"AnthropicAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey","title":"fastagency.models.llms.anthropic.AnthropicAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/llms/anthropic.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: AnthropicAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/anthropic/AnthropicAPIKey/#fastagency.models.llms.anthropic.AnthropicAPIKey.validate_api_key","title":"validate_api_key  <code>classmethod</code>","text":"<pre><code>validate_api_key(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/llms/anthropic.py</code> <pre><code>@field_validator(\"api_key\")\n@classmethod\ndef validate_api_key(cls: Type[\"AnthropicAPIKey\"], value: Any) -&gt; Any:\n    if not re.match(r\"^sk-ant-api03-[a-zA-Z0-9\\-\\_]{95}$\", value):\n        raise ValueError(\"Invalid Anthropic API Key\")\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/","title":"AzureOAI","text":"","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI","title":"fastagency.models.llms.azure.AzureOAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: AzureOAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['azure'] = 'azure'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: AzureApiVersionsLiteral = '2024-02-01'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.openai.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/models/llms/azure.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]:\n    my_model = await cls.from_db(model_id)\n\n    api_key_model = await my_model.api_key.get_data_model().from_db(\n        my_model.api_key.uuid\n    )\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n            \"api_version\": my_model.api_version,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/","title":"AzureOAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey","title":"fastagency.models.llms.azure.AzureOAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/llms/azure.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/","title":"OpenAI","text":"","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI","title":"fastagency.models.llms.openai.OpenAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: OpenAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['openai'] = 'openai'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.openai.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: OpenAIModels = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/models/llms/openai.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]:\n    my_model: OpenAI = await cls.from_db(model_id)\n\n    api_key_model: OpenAIAPIKey = await my_model.api_key.get_data_model().from_db(\n        my_model.api_key.uuid\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/","title":"OpenAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey","title":"fastagency.models.llms.openai.OpenAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/llms/openai.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: OpenAIAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.validate_api_key","title":"validate_api_key  <code>classmethod</code>","text":"<pre><code>validate_api_key(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/llms/openai.py</code> <pre><code>@field_validator(\"api_key\")\n@classmethod\ndef validate_api_key(cls: Type[\"OpenAIAPIKey\"], value: Any) -&gt; Any:\n    if not re.match(r\"^sk-[a-zA-Z0-9]{20}T3BlbkFJ[a-zA-Z0-9]{20}$\", value):\n        raise ValueError(\"Invalid OpenAI API Key\")\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/","title":"TogetherAI","text":"","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI","title":"fastagency.models.llms.together.TogetherAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: TogetherAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['togetherai'] = 'togetherai'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.together.xyz/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: TogetherModels = 'Meta Llama 3 70B Reference'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/models/llms/together.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Dict[str, Any]:\n    my_model: TogetherAI = await cls.from_db(model_id)\n\n    api_key_model: TogetherAIAPIKey = (\n        await my_model.api_key.get_data_model().from_db(my_model.api_key.uuid)\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": together_model_string[my_model.model],\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAI/#fastagency.models.llms.together.TogetherAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/","title":"TogetherAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey","title":"fastagency.models.llms.together.TogetherAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/llms/together.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: TogetherAIAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/together/TogetherAIAPIKey/#fastagency.models.llms.together.TogetherAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/","title":"ModelSchema","text":"","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema","title":"fastagency.models.registry.ModelSchema","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema.json_schema","title":"json_schema  <code>instance-attribute</code>","text":"<pre><code>json_schema: Dict[str, Any]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/","title":"ModelSchemas","text":"","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas","title":"fastagency.models.registry.ModelSchemas","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas.schemas","title":"schemas  <code>instance-attribute</code>","text":"<pre><code>schemas: List[ModelSchema]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry","title":"fastagency.models.registry.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(\n    type_name: str, model_name: str\n) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; Type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; List[Type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; List[Type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: Type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schema(self, model: Type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [\n        self.get_model_schema(model)  # type: ignore[arg-type]\n        for _, (model, _) in models.items()\n    ]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_models_refs_by_type","title":"get_models_refs_by_type","text":"<pre><code>get_models_refs_by_type(\n    type: str,\n) -&gt; List[Type[ObjectReference]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_models_refs_by_type(self, type: str) -&gt; List[Type[ObjectReference]]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n\n    return [ref for _, ref in models.values()]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: Type[M]) -&gt; Type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: Type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model\n\n        model._reference_model = reference_model\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.validate","title":"validate","text":"<pre><code>validate(\n    type: str, name: str, model: Dict[str, Any]\n) -&gt; Model\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: Dict[str, Any]) -&gt; Model:\n    model_type = self.get_model_type(type, name)\n    return model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/","title":"Schemas","text":"","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/#fastagency.models.registry.Schemas","title":"fastagency.models.registry.Schemas","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/#fastagency.models.registry.Schemas.list_of_schemas","title":"list_of_schemas  <code>instance-attribute</code>","text":"<pre><code>list_of_schemas: List[ModelSchemas]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/register/","title":"register","text":"","boost":0.5},{"location":"api/fastagency/models/registry/register/#fastagency.models.registry.register","title":"fastagency.models.registry.register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    return Registry.get_default().register(type_name)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/","title":"FlyToken","text":"","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken","title":"fastagency.models.secrets.fly_token.FlyToken","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken.fly_token","title":"fly_token  <code>instance-attribute</code>","text":"<pre><code>fly_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/secrets/fly_token.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.fly_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/fly_token/FlyToken/#fastagency.models.secrets.fly_token.FlyToken.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/","title":"GitHubToken","text":"","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken","title":"fastagency.models.secrets.github_token.GitHubToken","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken.gh_token","title":"gh_token  <code>instance-attribute</code>","text":"<pre><code>gh_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/models/secrets/github_token.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.gh_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/secrets/github_token/GitHubToken/#fastagency.models.secrets.github_token.GitHubToken.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/","title":"TeamBaseModel","text":"","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel","title":"fastagency.models.teams.base.TeamBaseModel","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/TeamBaseModel/#fastagency.models.teams.base.TeamBaseModel.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: Dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: Dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/base/register_toolbox_functions/","title":"register_toolbox_functions","text":"","boost":0.5},{"location":"api/fastagency/models/teams/base/register_toolbox_functions/#fastagency.models.teams.base.register_toolbox_functions","title":"fastagency.models.teams.base.register_toolbox_functions","text":"<pre><code>register_toolbox_functions(\n    agent: ConversableAgent,\n    execution_agents: List[ConversableAgent],\n    clients: List[Client],\n) -&gt; None\n</code></pre> Source code in <code>fastagency/models/teams/base.py</code> <pre><code>def register_toolbox_functions(\n    agent: ConversableAgent,\n    execution_agents: List[ConversableAgent],\n    clients: List[Client],\n) -&gt; None:\n    for client in clients:\n        client.register_for_llm(agent)\n        for execution_agent in execution_agents:\n            client.register_for_execution(execution_agent)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/AutogenMultiAgentTeam/","title":"AutogenMultiAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.models.teams.multi_agent_team.AutogenMultiAgentTeam","title":"fastagency.models.teams.multi_agent_team.AutogenMultiAgentTeam","text":"<pre><code>AutogenMultiAgentTeam(\n    agents_and_clients: List[\n        Tuple[ConversableAgent, List[Client]]\n    ]\n)\n</code></pre> Source code in <code>fastagency/models/teams/multi_agent_team.py</code> <pre><code>def __init__(\n    self,\n    agents_and_clients: List[Tuple[ConversableAgent, List[Client]]],\n) -&gt; None:\n    self.agents = [agent for agent, _ in agents_and_clients]\n    self.clients = [clients for _, clients in agents_and_clients]\n\n    for i, (agent, clients) in enumerate(agents_and_clients):\n        other_agents = [\n            other_agent\n            for j, (other_agent, _) in enumerate(agents_and_clients)\n            if i != j\n        ]\n        register_toolbox_functions(agent, other_agents, clients)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.models.teams.multi_agent_team.AutogenMultiAgentTeam.agents","title":"agents  <code>instance-attribute</code>","text":"<pre><code>agents = [agent for (agent, _) in agents_and_clients]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.models.teams.multi_agent_team.AutogenMultiAgentTeam.clients","title":"clients  <code>instance-attribute</code>","text":"<pre><code>clients = [clients for (_, clients) in agents_and_clients]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.models.teams.multi_agent_team.AutogenMultiAgentTeam.initiate_chat","title":"initiate_chat","text":"<pre><code>initiate_chat(message: str) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/models/teams/multi_agent_team.py</code> <pre><code>def initiate_chat(self, message: str) -&gt; List[Dict[str, Any]]:\n    groupchat = GroupChat(agents=self.agents, messages=[])\n    manager = GroupChatManager(groupchat=groupchat)\n    return self.agents[0].initiate_chat(  # type: ignore[no-any-return]\n        recipient=manager, message=message\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/","title":"MultiAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam","title":"fastagency.models.teams.multi_agent_team.MultiAgentTeam","text":"<p>               Bases: <code>TeamBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.agent_1","title":"agent_1  <code>instance-attribute</code>","text":"<pre><code>agent_1: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.agent_2","title":"agent_2  <code>instance-attribute</code>","text":"<pre><code>agent_2: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.agent_3","title":"agent_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_3: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.agent_4","title":"agent_4  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_4: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.agent_5","title":"agent_5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_5: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/teams/multi_agent_team.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    my_model = await cls.from_db(model_id)\n\n    agents_and_clients: List[Tuple[ConversableAgent, List[Client]]] = []\n    for i in range(5):\n        agent_property = getattr(my_model, f\"agent_{i+1}\")\n        if agent_property is None:\n            continue\n\n        agent_model = await agent_property.get_data_model().from_db(\n            agent_property.uuid\n        )\n\n        agent, clients = await agent_model.create_autogen(\n            getattr(my_model, f\"agent_{i+1}\").uuid, user_id\n        )\n        agents_and_clients.append((agent, clients))\n\n    return AutogenMultiAgentTeam(agents_and_clients)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.models.teams.multi_agent_team.MultiAgentTeam.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: Dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: Dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/AutogenTwoAgentTeam/","title":"AutogenTwoAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.models.teams.two_agent_teams.AutogenTwoAgentTeam","title":"fastagency.models.teams.two_agent_teams.AutogenTwoAgentTeam","text":"<pre><code>AutogenTwoAgentTeam(\n    *,\n    initial_agent: ConversableAgent,\n    initial_agent_clients: List[Client],\n    secondary_agent: ConversableAgent,\n    secondary_agent_clients: List[Client]\n)\n</code></pre> Source code in <code>fastagency/models/teams/two_agent_teams.py</code> <pre><code>def __init__(\n    self,\n    *,\n    initial_agent: ConversableAgent,\n    initial_agent_clients: List[Client],\n    secondary_agent: ConversableAgent,\n    secondary_agent_clients: List[Client],\n) -&gt; None:\n    self.initial_agent = initial_agent\n    self.secondary_agent = secondary_agent\n\n    register_toolbox_functions(\n        initial_agent, [secondary_agent], initial_agent_clients\n    )\n    register_toolbox_functions(\n        secondary_agent, [initial_agent], secondary_agent_clients\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.models.teams.two_agent_teams.AutogenTwoAgentTeam.initial_agent","title":"initial_agent  <code>instance-attribute</code>","text":"<pre><code>initial_agent = initial_agent\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.models.teams.two_agent_teams.AutogenTwoAgentTeam.secondary_agent","title":"secondary_agent  <code>instance-attribute</code>","text":"<pre><code>secondary_agent = secondary_agent\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.models.teams.two_agent_teams.AutogenTwoAgentTeam.initiate_chat","title":"initiate_chat","text":"<pre><code>initiate_chat(message: str) -&gt; List[Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/models/teams/two_agent_teams.py</code> <pre><code>def initiate_chat(self, message: str) -&gt; List[Dict[str, Any]]:\n    return self.initial_agent.initiate_chat(  # type: ignore[no-any-return]\n        recipient=self.secondary_agent, message=message\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/","title":"TwoAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam","title":"fastagency.models.teams.two_agent_teams.TwoAgentTeam","text":"<p>               Bases: <code>TeamBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.initial_agent","title":"initial_agent  <code>instance-attribute</code>","text":"<pre><code>initial_agent: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.secondary_agent","title":"secondary_agent  <code>instance-attribute</code>","text":"<pre><code>secondary_agent: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/models/teams/two_agent_teams.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    my_model = await cls.from_db(model_id)\n\n    is_termination_msg = my_model.is_termination_msg\n    human_input_mode = my_model.human_input_mode\n\n    initial_agent_model = await my_model.initial_agent.get_data_model().from_db(\n        my_model.initial_agent.uuid\n    )\n    (\n        initial_agent,\n        initial_agent_clients,\n    ) = await initial_agent_model.create_autogen(\n        my_model.initial_agent.uuid,\n        user_id,\n        is_termination_msg=is_termination_msg,\n        human_input_mode=human_input_mode,\n    )\n\n    secondary_agent_model = await my_model.secondary_agent.get_data_model().from_db(\n        my_model.secondary_agent.uuid\n    )\n    (\n        secondary_agent,\n        secondary_agent_clients,\n    ) = await secondary_agent_model.create_autogen(\n        my_model.secondary_agent.uuid,\n        user_id,\n        is_termination_msg=is_termination_msg,\n        human_input_mode=human_input_mode,\n    )\n\n    return AutogenTwoAgentTeam(\n        initial_agent=initial_agent,\n        initial_agent_clients=initial_agent_clients,\n        secondary_agent=secondary_agent,\n        secondary_agent_clients=secondary_agent_clients,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.models.teams.two_agent_teams.TwoAgentTeam.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: Dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: Dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/","title":"Client","text":"","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client","title":"fastagency.openapi.client.Client","text":"<pre><code>Client(\n    servers: List[Dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: List[Dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: List[Callable[..., Any]] = []\n    self.globals: Dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: Dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: List[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(openapi_json: str) -&gt; Client\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>@classmethod\ndef create(cls, openapi_json: str) -&gt; \"Client\":\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        sufix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: Client = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, sufix=sufix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n) -&gt; str:\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def register_for_execution(self, agent: \"ConversableAgent\") -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def register_for_llm(self, agent: \"ConversableAgent\") -&gt; None:\n    with add_to_globals(self.globals):\n        for f in self.registered_funcs:\n            agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Client/#fastagency.openapi.client.Client.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, sufix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, sufix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{sufix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/","title":"OpenAPIAuth","text":"","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth","title":"fastagency.models.toolboxes.toolbox.OpenAPIAuth","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[str, str]\n</code></pre> Source code in <code>fastagency/models/toolboxes/toolbox.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Tuple[str, str]:\n    raise RuntimeError(\"This method should never be called.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.models.toolboxes.toolbox.OpenAPIAuth.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/","title":"Toolbox","text":"","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox","title":"fastagency.models.toolboxes.toolbox.Toolbox","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.openapi_auth","title":"openapi_auth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openapi_auth: Optional[OpenAPIAuthRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.openapi_url","title":"openapi_url  <code>instance-attribute</code>","text":"<pre><code>openapi_url: URL\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Client\n</code></pre> Source code in <code>fastagency/models/toolboxes/toolbox.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Client:\n    my_model = await cls.from_db(model_id)\n\n    # Download OpenAPI spec\n    with httpx.Client() as httpx_client:\n        response = httpx_client.get(my_model.openapi_url)  # type: ignore[arg-type]\n        response.raise_for_status()\n        openapi_spec = response.text\n\n    client = Client.create(openapi_spec)\n\n    return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: Type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/toolboxes/toolbox/Toolbox/#fastagency.models.toolboxes.toolbox.Toolbox.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/","title":"Client","text":"","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client","title":"fastagency.openapi.client.Client","text":"<pre><code>Client(\n    servers: List[Dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: List[Dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: List[Callable[..., Any]] = []\n    self.globals: Dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: Dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: List[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(openapi_json: str) -&gt; Client\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>@classmethod\ndef create(cls, openapi_json: str) -&gt; \"Client\":\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        sufix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: Client = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, sufix=sufix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n) -&gt; str:\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., Dict[str, Any]]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., Dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def register_for_execution(self, agent: \"ConversableAgent\") -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def register_for_llm(self, agent: \"ConversableAgent\") -&gt; None:\n    with add_to_globals(self.globals):\n        for f in self.registered_funcs:\n            agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/Client/#fastagency.openapi.client.Client.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, sufix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, sufix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{sufix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/client/add_to_globals/","title":"add_to_globals","text":"","boost":0.5},{"location":"api/fastagency/openapi/client/add_to_globals/#fastagency.openapi.client.add_to_globals","title":"fastagency.openapi.client.add_to_globals","text":"<pre><code>add_to_globals(\n    new_globals: Dict[str, Any]\n) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/openapi/client.py</code> <pre><code>@contextmanager\ndef add_to_globals(new_globals: Dict[str, Any]) -&gt; Iterator[None]:\n    old_globals: Dict[str, Any] = {}\n    try:\n        for key, value in new_globals.items():\n            if key in globals():\n                old_globals[key] = globals()[key]\n            globals()[key] = value\n        yield\n    finally:\n        for key, value in old_globals.items():\n            globals()[key] = value\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/","title":"ArgumentWithDescription","text":"","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","title":"fastagency.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","text":"<p>               Bases: <code>Argument</code></p>","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.argument","title":"argument  <code>cached</code> <code>property</code>","text":"<pre><code>argument: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/","title":"patch_get_parameter_type","text":"","boost":0.5},{"location":"api/fastagency/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/#fastagency.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","title":"fastagency.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","text":"<pre><code>patch_get_parameter_type() -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/openapi/fastapi_code_generator_helpers.py</code> <pre><code>@contextmanager\ndef patch_get_parameter_type() -&gt; Iterator[None]:\n    original_get_parameter_type = OpenAPIParser.get_parameter_type\n\n    def get_parameter_type(\n        self: OpenAPIParser,\n        parameters: Union[ReferenceObject, ParameterObject],\n        snake_case: bool,\n        path: List[str],\n    ) -&gt; Optional[Argument]:\n        # get the original argument\n        argument = original_get_parameter_type(self, parameters, snake_case, path)\n\n        # add description to the argument\n        parameters = self.resolve_object(parameters, ParameterObject)\n        argument_with_description = ArgumentWithDescription(\n            description=parameters.description, **argument.model_dump()\n        )\n        return argument_with_description\n\n    OpenAPIParser.get_parameter_type = get_parameter_type\n\n    try:\n        yield\n    finally:\n        OpenAPIParser.get_parameter_type = original_get_parameter_type\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidFlyTokenError/","title":"InvalidFlyTokenError","text":"","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidFlyTokenError/#fastagency.saas_app_generator.InvalidFlyTokenError","title":"fastagency.saas_app_generator.InvalidFlyTokenError","text":"<pre><code>InvalidFlyTokenError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs while validating the Fly.io token.</p> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"Exception raised when an error occurs while validating the Fly.io token.\"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidFlyTokenError/#fastagency.saas_app_generator.InvalidFlyTokenError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidGHTokenError/","title":"InvalidGHTokenError","text":"","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidGHTokenError/#fastagency.saas_app_generator.InvalidGHTokenError","title":"fastagency.saas_app_generator.InvalidGHTokenError","text":"<pre><code>InvalidGHTokenError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs while creating a GitHub repository.</p> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"Exception raised when an error occurs while creating a GitHub repository.\"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/InvalidGHTokenError/#fastagency.saas_app_generator.InvalidGHTokenError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/","title":"SaasAppGenerator","text":"","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator","title":"fastagency.saas_app_generator.SaasAppGenerator","text":"<pre><code>SaasAppGenerator(\n    fly_api_token: str,\n    fastagency_deployment_uuid: str,\n    github_token: str,\n    app_name: str,\n    repo_name: str,\n    fly_app_name: str,\n    deployment_auth_token: Union[str, None] = None,\n    developer_uuid: Union[str, None] = None,\n)\n</code></pre> <p>GitHubManager class.</p> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def __init__(\n    self,\n    fly_api_token: str,\n    fastagency_deployment_uuid: str,\n    github_token: str,\n    app_name: str,\n    repo_name: str,\n    fly_app_name: str,\n    deployment_auth_token: Union[str, None] = None,\n    developer_uuid: Union[str, None] = None,\n) -&gt; None:\n    \"\"\"GitHubManager class.\"\"\"\n    self.template_repo_url = SaasAppGenerator.TEMPLATE_REPO_URL\n    self.fly_api_token = fly_api_token\n    self.fastagency_deployment_uuid = fastagency_deployment_uuid\n    self.github_token = github_token\n    self.app_name = app_name\n    self.repo_name = repo_name\n    self.fly_app_name = fly_app_name\n    self.deployment_auth_token = deployment_auth_token\n    self.developer_uuid = developer_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.ARTIFACTS_DIR","title":"ARTIFACTS_DIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARTIFACTS_DIR = '.tmp_fastagency_setup_artifacts'\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.DEPLOYMENT_BRANCH","title":"DEPLOYMENT_BRANCH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEPLOYMENT_BRANCH = (\n    \"dev\"\n    if FASTAGENCY_SERVER_URL\n    and \"staging\" in FASTAGENCY_SERVER_URL\n    else \"main\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.EXTRACTED_TEMPLATE_DIR_NAME","title":"EXTRACTED_TEMPLATE_DIR_NAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EXTRACTED_TEMPLATE_DIR_NAME = (\n    f\"fastagency-wasp-app-template-{DEPLOYMENT_BRANCH}\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.FASTAGENCY_SERVER_URL","title":"FASTAGENCY_SERVER_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FASTAGENCY_SERVER_URL = get('FASTAGENCY_SERVER_URL', None)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.TEMPLATE_REPO_URL","title":"TEMPLATE_REPO_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEMPLATE_REPO_URL = (\n    \"https://github.com/airtai/fastagency-wasp-app-template\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.app_name","title":"app_name  <code>instance-attribute</code>","text":"<pre><code>app_name = app_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.deployment_auth_token","title":"deployment_auth_token  <code>instance-attribute</code>","text":"<pre><code>deployment_auth_token = deployment_auth_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.developer_uuid","title":"developer_uuid  <code>instance-attribute</code>","text":"<pre><code>developer_uuid = developer_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.fastagency_deployment_uuid","title":"fastagency_deployment_uuid  <code>instance-attribute</code>","text":"<pre><code>fastagency_deployment_uuid = fastagency_deployment_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.fly_api_token","title":"fly_api_token  <code>instance-attribute</code>","text":"<pre><code>fly_api_token = fly_api_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.fly_app_name","title":"fly_app_name  <code>instance-attribute</code>","text":"<pre><code>fly_app_name = fly_app_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.github_token","title":"github_token  <code>instance-attribute</code>","text":"<pre><code>github_token = github_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.repo_name","title":"repo_name  <code>instance-attribute</code>","text":"<pre><code>repo_name = repo_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.template_repo_url","title":"template_repo_url  <code>instance-attribute</code>","text":"<pre><code>template_repo_url = TEMPLATE_REPO_URL\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.create_new_repository","title":"create_new_repository","text":"<pre><code>create_new_repository(max_retries: int = 5) -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def create_new_repository(\n    self,\n    max_retries: int = 5,\n) -&gt; None:\n    # copy the environment variables to pass to the subprocess\n    env = environ.copy()\n\n    # Add the GitHub token to the environment variables to pass to the subprocess\n    env[\"GH_TOKEN\"] = self.github_token\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_dir_path = Path(temp_dir)\n\n        repo_name = self.repo_name\n        for attempt in range(max_retries):\n            try:\n                log_file = temp_dir_path / \"log_file.txt\"\n                command = f\"gh repo create {repo_name} --public &gt; {log_file}\"\n                self._run_cli_command(command, cwd=str(temp_dir_path), env=env)\n\n                # Open the log file and read its contents\n                with log_file.open(\"r\") as file:\n                    self.gh_repo_url = file.read().strip()\n\n                break\n            except Exception as e:\n                if attempt &lt; max_retries - 1:\n                    # add random 5 digit number to the repo name\n                    repo_name = f\"{repo_name}-{random.randint(10000, 99999)}\"  # nosec B311\n                    logging.info(\n                        f\"Repository name already exists. Retrying with a new name: {repo_name}\"\n                    )\n                else:\n                    logging.error(e)\n                    msg = \"Unable to create a new GitHub repository. Please try again later.\"\n                    raise InvalidGHTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.execute","title":"execute","text":"<pre><code>execute() -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def execute(self) -&gt; None:\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_dir_path = Path(temp_dir)\n\n        # Download the public repository\n        self._download_template_repo(temp_dir_path)\n\n        # copy the environment variables to pass to the subprocess\n        env = environ.copy()\n\n        # Add the GitHub token to the environment variables to pass to the subprocess\n        env[\"GH_TOKEN\"] = self.github_token\n\n        # Initialize the git repository and push the changes\n        self._initialize_git_and_push(temp_dir_path, env=env)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.validate_fly_token","title":"validate_fly_token","text":"<pre><code>validate_fly_token(env: Dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def validate_fly_token(self, env: Dict[str, Any]) -&gt; None:\n    env[\"FLY_API_TOKEN\"] = self.fly_api_token\n\n    try:\n        command = 'fly auth whoami --access-token \"$FLY_API_TOKEN\"'\n        self._run_cli_command(command, env=env)\n    except Exception as e:\n        logging.error(e)\n        msg = \"Invalid Fly.io token. Please provide a valid Fly.io token.\"\n        raise InvalidFlyTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.validate_gh_token","title":"validate_gh_token","text":"<pre><code>validate_gh_token(env: Dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def validate_gh_token(self, env: Dict[str, Any]) -&gt; None:\n    env[\"GH_TOKEN\"] = self.github_token\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        try:\n            log_file = Path(temp_dir) / \"log_file.txt\"\n            command = f\"gh auth status &gt; {log_file}\"\n            self._run_cli_command(command, env=env, print_output=True)\n\n            with log_file.open(\"r\") as file:\n                contents = file.read().strip()\n\n            if \"GH_TOKEN is invalid\" in contents:\n                msg = \"Invalid GitHub token. Please provide a valid GitHub token.\"\n                raise Exception(msg)\n\n        except Exception as e:\n            logging.error(e)\n            raise InvalidGHTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/SaasAppGenerator/#fastagency.saas_app_generator.SaasAppGenerator.validate_tokens","title":"validate_tokens","text":"<pre><code>validate_tokens() -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def validate_tokens(self) -&gt; None:\n    env = environ.copy()\n\n    self.validate_gh_token(env)\n    self.validate_fly_token(env)\n</code></pre>","boost":0.5},{"location":"api/fastagency/saas_app_generator/main/","title":"main","text":"","boost":0.5},{"location":"api/fastagency/saas_app_generator/main/#fastagency.saas_app_generator.main","title":"fastagency.saas_app_generator.main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>fastagency/saas_app_generator.py</code> <pre><code>def main() -&gt; None:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"fly_token\", help=\"Fly.io token\")\n    parser.add_argument(\"uuid\", help=\"Deployment UUID\")\n    parser.add_argument(\"gh_token\", help=\"GitHub token\")\n    parser.add_argument(\"app_name\", help=\"Deployment name\")\n    parser.add_argument(\"fly_app_name\", help=\"Fly app name\")\n    parser.add_argument(\"repo_name\", help=\"Repo name\")\n    args = parser.parse_args()\n\n    manager = SaasAppGenerator(\n        args.fly_token,\n        args.uuid,\n        args.gh_token,\n        args.app_name,\n        args.fly_app_name,\n        args.repo_name,\n    )\n\n    manager.create_new_repository()\n    logging.info(f\"{manager.gh_repo_url=}\")\n\n    manager.execute()\n</code></pre>","boost":0.5},{"location":"getting-started/contributing/CONTRIBUTING/","title":"Development","text":"<p>After cloning the project, you'll need to set up the development environment. Here are the guidelines on how to do this.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#virtual-environment-with-venv","title":"Virtual Environment with <code>venv</code>","text":"<p>Create a virtual environment in a directory using Python's <code>venv</code> module:</p> <pre><code>python -m venv venv\n</code></pre> <p>That will create a <code>./venv/</code> directory with Python binaries, allowing you to install packages in an isolated environment.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#activate-the-environment","title":"Activate the Environment","text":"<p>Activate the new environment with:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Ensure you have the latest pip version in your virtual environment:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#installing-dependencies","title":"Installing Dependencies","text":"<p>After activating the virtual environment as described above, run:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install all the dependencies and your local FastAgency in your virtual environment.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#using-your-local-fastagency","title":"Using Your local FastAgency","text":"<p>If you create a Python file that imports and uses FastAgency, and run it with the Python from your local environment, it will use your local FastAgency source code.</p> <p>Whenever you update your local FastAgency source code, it will automatically use the latest version when you run your Python file again. This is because it is installed with <code>-e</code>.</p> <p>This way, you don't have to \"install\" your local version to be able to test every change.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#running-tests","title":"Running Tests","text":"","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#pytest","title":"Pytest","text":"<p>To run tests with your current FastAgency application and Python environment, use:</p> <pre><code>pytest tests\n# or\n./scripts/test.sh\n# with coverage output\n./scripts/test-cov.sh\n</code></pre> <p>In your project, you'll find some pytest marks:</p> <ul> <li>slow</li> <li>all</li> </ul> <p>By default, running pytest will execute \"not slow\" tests.</p> <p>To run all tests use:</p> <pre><code>pytest -m 'all'\n</code></pre>","boost":3},{"location":"getting-started/contributing/docs/","title":"Documentation","text":"","boost":3},{"location":"getting-started/contributing/docs/#how-to-help","title":"How to help","text":"<p>You will be of invaluable help if you contribute to the documentation.</p> <p>Such a contribution can be:</p> <ul> <li>Indications of inaccuracies, errors, typos</li> <li>Suggestions for editing specific sections</li> <li>Making additions</li> </ul> <p>You can report all this in discussions on GitHub, start issue, or write about it in our discord group.</p> <p>Note</p> <p>Special thanks to those who are ready to offer help with the case and help in developing documentation, as well as translating it into other languages.</p>","boost":3},{"location":"getting-started/contributing/docs/#how-to-get-started","title":"How to get started","text":"<p>To develop the documentation, you don't even need to install the entire FastAgency project as a whole.</p> <p>Enough:</p> <ol> <li>Clone the project repository</li> <li>Create a virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Activate it     <pre><code>source venv/bin/activate\n</code></pre></li> <li>Install documentation dependencies     <pre><code>pip install \".[devdocs]\"\n</code></pre></li> <li>Go to the <code>docs/</code> directory</li> <li>Start the local documentation server     <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now all changes in the documentation files will be reflected on your local version of the site. After making all the changes, you can issue a <code>PR</code> with them - and we will gladly accept it!</p>","boost":3}]}