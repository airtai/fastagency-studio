name: Test

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run the tests in'
        required: false
        default: null
        type: string
      python-version:
        description: 'Python version to run the tests in'
        required: true
        type: string
      use-llms:
        description: 'Use LLM in the tests'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ inputs.environment }}
    services:
      nats:
        image: diementros/nats:js
        ports:
          - 4222:4222
      postgres-wasp:
        image: postgres:13
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: fastagency
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      postgres-py:
        image: postgres:13
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pyfastagency
        ports:
          - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql://admin:password@localhost:5432/fastagency
      PY_DATABASE_URL: postgresql://admin:password@localhost:5433/pyfastagency
      NATS_URL: nats://localhost:4222

    steps:
      - name: Set up environment variables
        run: |
          # check if an environment var or secret is defined and set env var to its value

          # vars

          if [ -n "${{ vars.AZURE_API_VERSION }}" ]; then
            echo "AZURE_API_VERSION=${{ vars.AZURE_API_VERSION }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ vars.AZURE_API_ENDPOINT }}" ]; then
            echo "AZURE_API_ENDPOINT=${{ vars.AZURE_API_ENDPOINT }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ vars.AZURE_GPT35_MODEL }}" ]; then
            echo "AZURE_GPT35_MODEL=${{ vars.AZURE_GPT35_MODEL }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ vars.AZURE_GPT4_MODEL }}" ]; then
            echo "AZURE_GPT4_MODEL=${{ vars.AZURE_GPT4_MODEL }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ vars.AZURE_GPT4o_MODEL }}" ]; then
            echo "AZURE_GPT4o_MODEL=${{ vars.AZURE_GPT4o_MODEL }}" >> $GITHUB_ENV
          fi

          # secrets

          if [ -n "${{ secrets.AZURE_OPENAI_API_KEY }}" ]; then
            echo "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.TOGETHER_API_KEY }}" ]; then
            echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.BING_API_KEY }}" ]; then
            echo "BING_API_KEY=${{ secrets.BING_API_KEY }}" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v03
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install wasp
        run: curl -sSL https://get.wasp-lang.dev/installer.sh | sh -s -- -v 0.14.0
      - name: Run wasp migration
        run: cd app && wasp db migrate-dev && cd ..
      - name: Install Dependencies
        # if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[docs,testing]
      - name: Install Pydantic v2
        run: pip install --pre "pydantic>=2,<3"
      - run: mkdir coverage
      - name: Prisma
        run: prisma migrate deploy && prisma generate
      - name: Test without LLMs
        if: ${{ inputs.use-llms == '' }}
        run: bash scripts/test.sh -vv -m "not (anthropic or azure_oai or openai or togetherai or llm)"
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ inputs.python-version }}-${{ inputs.use-llms }}
          CONTEXT: ${{ runner.os }}-py${{ inputs.python-version }}-${{ inputs.use-llms }}
      - name: Test with LLMs
        if: ${{ inputs.use-llms != '' }}
        run: bash scripts/test.sh -vv -m "${{ inputs.use-llms }}"
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ inputs.python-version }}-${{ inputs.use-llms }}
          CONTEXT: ${{ runner.os }}-py${{ inputs.python-version }}-${{ inputs.use-llms }}
      - name: Check coverage file
        run: ls -l coverage
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ runner.os }}-py${{ inputs.python-version }}-${{ inputs.use-llms }}
          path: coverage
          if-no-files-found: error
