{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"release/","title":"Release Notes","text":"","boost":2},{"location":"release/#000dev0","title":"0.0.0dev0","text":"<p>Full Changelog: #0.0.0dev0</p> <p>Initial commit</p>","boost":2},{"location":"api/fastagency/app/Model/","title":"Model","text":"","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model","title":"fastagency.app.Model","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.api_type","title":"api_type  <code>instance-attribute</code>","text":"<pre><code>api_type: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/Model/#fastagency.app.Model.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelDelete/","title":"ModelDelete","text":"","boost":0.5},{"location":"api/fastagency/app/ModelDelete/#fastagency.app.ModelDelete","title":"fastagency.app.ModelDelete","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/app/ModelDelete/#fastagency.app.ModelDelete.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelDelete/#fastagency.app.ModelDelete.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/","title":"ModelUpdate","text":"","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate","title":"fastagency.app.ModelUpdate","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.api_type","title":"api_type  <code>instance-attribute</code>","text":"<pre><code>api_type: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/ModelUpdate/#fastagency.app.ModelUpdate.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/User/","title":"User","text":"","boost":0.5},{"location":"api/fastagency/app/User/#fastagency.app.User","title":"fastagency.app.User","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/app/User/#fastagency.app.User.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/find_model/","title":"find_model","text":"","boost":0.5},{"location":"api/fastagency/app/find_model/#fastagency.app.find_model","title":"fastagency.app.find_model","text":"<pre><code>find_model(user_id: int, uuid: str) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>def find_model(user_id: int, uuid: str) -&gt; Dict[str, Any]:\n    if user_id not in all_models:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    for model in all_models[user_id]:\n        if model and model[\"uuid\"] == uuid:\n            return model\n    raise HTTPException(status_code=404, detail=\"Model not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/get_models_schemas/","title":"get_models_schemas","text":"","boost":0.5},{"location":"api/fastagency/app/get_models_schemas/#fastagency.app.get_models_schemas","title":"fastagency.app.get_models_schemas  <code>async</code>","text":"<pre><code>get_models_schemas() -&gt; Schemas\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.get(\"/models/schemas\")\nasync def get_models_schemas() -&gt; Schemas:\n    schemas = Registry.get_default().get_schemas()\n    return schemas\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/models/","title":"models","text":"","boost":0.5},{"location":"api/fastagency/app/models/#fastagency.app.models","title":"fastagency.app.models","text":"<pre><code>models(user: User) -&gt; List[Optional[Dict[str, Any]]]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.post(\"/user/models\")\ndef models(user: User) -&gt; List[Optional[Dict[str, Any]]]:\n    return all_models.get(user.user_id, [])\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/models_add/","title":"models_add","text":"","boost":0.5},{"location":"api/fastagency/app/models_add/#fastagency.app.models_add","title":"fastagency.app.models_add","text":"<pre><code>models_add(model: Model) -&gt; List[Optional[Dict[str, Any]]]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.post(\"/user/models/add\")\ndef models_add(model: Model) -&gt; List[Optional[Dict[str, Any]]]:\n    models = all_models.setdefault(model.user_id, [])\n    model_dict = model.model_dump()\n    models.append(model_dict)\n    return models\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/models_delete/","title":"models_delete","text":"","boost":0.5},{"location":"api/fastagency/app/models_delete/#fastagency.app.models_delete","title":"fastagency.app.models_delete","text":"<pre><code>models_delete(model_delete: ModelDelete) -&gt; Dict[str, str]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.delete(\"/user/models/delete\")\ndef models_delete(model_delete: ModelDelete) -&gt; Dict[str, str]:\n    model = find_model(model_delete.user_id, model_delete.uuid)\n    all_models[model_delete.user_id].remove(model)\n    return {\"detail\": \"Model deleted successfully\"}\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/models_update/","title":"models_update","text":"","boost":0.5},{"location":"api/fastagency/app/models_update/#fastagency.app.models_update","title":"fastagency.app.models_update","text":"<pre><code>models_update(model_update: ModelUpdate) -&gt; Dict[str, Any]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.put(\"/user/models/update\")\ndef models_update(model_update: ModelUpdate) -&gt; Dict[str, Any]:\n    model = find_model(model_update.user_id, model_update.uuid)\n    updated_model = model_update.model_dump()\n    updated_model[\"uuid\"] = model[\"uuid\"]\n    all_models[model_update.user_id].remove(model)\n    all_models[model_update.user_id].append(updated_model)\n    return updated_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/validate_model/","title":"validate_model","text":"","boost":0.5},{"location":"api/fastagency/app/validate_model/#fastagency.app.validate_model","title":"fastagency.app.validate_model  <code>async</code>","text":"<pre><code>validate_model(type: str, name: str, model: Dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>@app.post(\"/models/{type}/{name}/validate\")\nasync def validate_model(type: str, name: str, model: Dict[str, Any]) -&gt; None:\n    try:\n        Registry.get_default().validate(type, name, model)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors()) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry","title":"fastagency.models.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(type_name: str, model_name: str) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; Type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; List[Type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; List[Type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: Type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schema(self, model: Type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [self.get_model_schema(model) for _, (model, _) in models.items()]  # type: ignore[arg-type]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: Type[M]) -&gt; Type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: Type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model  # type: ignore[attr-defined]\n\n        model._reference_model = reference_model  # type: ignore[attr-defined]\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/Registry/#fastagency.models.Registry.validate","title":"validate","text":"<pre><code>validate(type: str, name: str, model: Dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: Dict[str, Any]) -&gt; None:\n    model_type = self.get_model_type(type, name)\n    model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/","title":"AssistantAgent","text":"","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent","title":"fastagency.models.agents.assistant.AssistantAgent","text":"<p>             Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: Union[OpenAIAPIKeyRef, AzureOAIAPIKeyRef]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.system_message","title":"system_message  <code>instance-attribute</code>","text":"<pre><code>system_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/assistant/AssistantAgent/#fastagency.models.agents.assistant.AssistantAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/","title":"WebSurferAgent","text":"","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent","title":"fastagency.models.agents.web_surfer.WebSurferAgent","text":"<p>             Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.bing_api_key","title":"bing_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bing_api_key: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: Union[OpenAIAPIKeyRef, AzureOAIAPIKeyRef]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.summarizer_llm","title":"summarizer_llm  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm: Union[OpenAIAPIKeyRef, AzureOAIAPIKeyRef]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.viewport_size","title":"viewport_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>viewport_size: int = 1080\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/agents/web_surfer/WebSurferAgent/#fastagency.models.agents.web_surfer.WebSurferAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/Model/","title":"Model","text":"","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model","title":"fastagency.models.base.Model","text":"<p>             Bases: <code>BaseModel</code>, <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/models/base/Model/#fastagency.models.base.Model.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/","title":"ModelTypeFinder","text":"","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/#fastagency.models.base.ModelTypeFinder","title":"fastagency.models.base.ModelTypeFinder","text":"<p>             Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/models/base/ModelTypeFinder/#fastagency.models.base.ModelTypeFinder.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/","title":"ObjectReference","text":"","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference","title":"fastagency.models.base.ObjectReference","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.check_type","title":"check_type","text":"<pre><code>check_type() -&gt; ObjectReference\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_type(self) -&gt; \"ObjectReference\":\n    if self.type == \"\" or self.name == \"\":\n        raise ValueError(\"type and name must be set\")\n    return self\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(uuid: UUID) -&gt; ObjectReference\n</code></pre> <p>Factory method to create a new instance of the class.</p> <p>This method is used to create a new instance of the class with the given UUID. It is exacly the same as calling <code>ObjectReference(uuid=uuid)</code>, but without type cheching failing because of the missing <code>type</code> and <code>name</code> arguments.</p> PARAMETER DESCRIPTION <code>uuid</code> <p>The unique identifier of the object</p> <p> TYPE: <code>UUID</code> </p> RETURNS DESCRIPTION <code>ObjectReference</code> <p>The new instance of the class</p> <p> TYPE: <code>ObjectReference</code> </p> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef create(cls, uuid: UUID) -&gt; \"ObjectReference\":\n    \"\"\"Factory method to create a new instance of the class.\n\n    This method is used to create a new instance of the class with the given UUID. It\n    is exacly the same as calling `ObjectReference(uuid=uuid)`, but without type\n    cheching failing because of the missing `type` and `name` arguments.\n\n    Args:\n        uuid (UUID): The unique identifier of the object\n\n    Returns:\n        ObjectReference: The new instance of the class\n    \"\"\"\n    return cls(uuid=uuid)  # type: ignore[call-arg]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/ObjectReference/#fastagency.models.base.ObjectReference.get_data_model","title":"get_data_model  <code>classmethod</code>","text":"<pre><code>get_data_model() -&gt; Type[Model]\n</code></pre> <p>Get the data class for the reference.</p> <p>This method returns the data class that is associated with the reference class.</p> RETURNS DESCRIPTION <code>Type[Model]</code> <p>Type[BM]: The data class for the reference</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the data class is not set</p> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_data_model(cls) -&gt; Type[Model]:\n    \"\"\"Get the data class for the reference.\n\n    This method returns the data class that is associated with the reference class.\n\n    Returns:\n        Type[BM]: The data class for the reference\n\n    Raises:\n        ValueError: If the data class is not set\n\n    \"\"\"\n    if cls._data_class is None:\n        raise RuntimeError(\"data class not set\")\n\n    return cls._data_class\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/create_reference_model/","title":"create_reference_model","text":"","boost":0.5},{"location":"api/fastagency/models/base/create_reference_model/#fastagency.models.base.create_reference_model","title":"fastagency.models.base.create_reference_model","text":"<pre><code>create_reference_model(model_class: Optional[Type[M]] = None, *, type_name: str, model_name: Optional[str] = None) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def create_reference_model(\n    model_class: Optional[Type[M]] = None,\n    *,\n    type_name: str,\n    model_name: Optional[str] = None,\n) -&gt; Type[ObjectReference]:\n    if model_class is None and model_name is None:\n        raise ValueError(\"Either model_class or model_name should be provided\")\n    if model_class is not None and model_name is not None:\n        raise ValueError(\"Only one of model_class or model_name should be provided\")\n\n    model_type_name = model_class.__name__ if model_class is not None else model_name\n\n    LiteralType: TypeAlias = Literal[type_name]  # type: ignore[valid-type]\n    LiteralModelName: TypeAlias = Literal[model_type_name]  # type: ignore[valid-type]\n\n    reference_model = create_model(\n        f\"{model_type_name}Ref\",\n        type=(\n            Annotated[  # type: ignore[valid-type]\n                LiteralType, Field(description=\"The name of the type of the data\")\n            ],\n            type_name,\n        ),\n        name=(\n            Annotated[LiteralModelName, Field(description=\"The name of the data\")],\n            model_type_name,\n        ),\n        uuid=(\n            Annotated[UUID, Field(description=\"The unique identifier\", title=\"UUID\")],\n            ...,\n        ),\n        __base__=ObjectReference,\n    )\n    reference_model.__module__ = (\n        f\"fastagency.models.{type_name}.{model_type_name}._generated\"\n    )\n\n    reference_model._data_class = model_class  # type: ignore[attr-defined]\n    if model_class is not None:\n        model_class._reference_model = reference_model\n\n    return reference_model  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/base/get_reference_model/","title":"get_reference_model","text":"","boost":0.5},{"location":"api/fastagency/models/base/get_reference_model/#fastagency.models.base.get_reference_model","title":"fastagency.models.base.get_reference_model","text":"<pre><code>get_reference_model(model: Type[BaseModel]) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>def get_reference_model(model: Type[BaseModel]) -&gt; Type[ObjectReference]:\n    if issubclass(model, ObjectReference):\n        return model\n    elif hasattr(model, \"_reference_model\"):\n        return model._reference_model  # type: ignore[attr-defined,no-any-return]\n    raise ValueError(f\"Class '{model.__name__}' is not and does not have a reference\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/","title":"AzureOAI","text":"","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI","title":"fastagency.models.llms.azure.AzureOAI","text":"<p>             Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: AzureOAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['azure'] = 'azure'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: AZURE_API_VERSIONS_LITERAL = 'latest'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: HttpUrl = HttpUrl(url='https://api.openai.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAI/#fastagency.models.llms.azure.AzureOAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/","title":"AzureOAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey","title":"fastagency.models.llms.azure.AzureOAIAPIKey","text":"<p>             Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/azure/AzureOAIAPIKey/#fastagency.models.llms.azure.AzureOAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/","title":"OpenAI","text":"","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI","title":"fastagency.models.llms.openai.OpenAI","text":"<p>             Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: OpenAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['openai'] = 'openai'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: HttpUrl = HttpUrl(url='https://api.openai.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: Literal[OPENAI_MODELS_LITERAL] = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAI/#fastagency.models.llms.openai.OpenAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/","title":"OpenAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey","title":"fastagency.models.llms.openai.OpenAIAPIKey","text":"<p>             Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.check","title":"check","text":"<pre><code>check() -&gt; Self\n</code></pre> Source code in <code>fastagency/models/llms/openai.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check(self) -&gt; Self:\n    if not self.api_key.startswith(\"sk-\"):\n        raise ValueError(\"API Key must start with 'sk-'\")\n\n    return self\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/llms/openai/OpenAIAPIKey/#fastagency.models.llms.openai.OpenAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/","title":"ModelSchema","text":"","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema","title":"fastagency.models.registry.ModelSchema","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema.json_schema","title":"json_schema  <code>instance-attribute</code>","text":"<pre><code>json_schema: Dict[str, Any]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchema/#fastagency.models.registry.ModelSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/","title":"ModelSchemas","text":"","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas","title":"fastagency.models.registry.ModelSchemas","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/ModelSchemas/#fastagency.models.registry.ModelSchemas.schemas","title":"schemas  <code>instance-attribute</code>","text":"<pre><code>schemas: List[ModelSchema]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry","title":"fastagency.models.registry.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(type_name: str, model_name: str) -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; Type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; List[Type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; List[Type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: Type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schema(self, model: Type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [self.get_model_schema(model) for _, (model, _) in models.items()]  # type: ignore[arg-type]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; Type[Model]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; Type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: Type[M]) -&gt; Type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: Type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model  # type: ignore[attr-defined]\n\n        model._reference_model = reference_model  # type: ignore[attr-defined]\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Registry/#fastagency.models.registry.Registry.validate","title":"validate","text":"<pre><code>validate(type: str, name: str, model: Dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: Dict[str, Any]) -&gt; None:\n    model_type = self.get_model_type(type, name)\n    model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/","title":"Schemas","text":"","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/#fastagency.models.registry.Schemas","title":"fastagency.models.registry.Schemas","text":"<p>             Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/models/registry/Schemas/#fastagency.models.registry.Schemas.list_of_schemas","title":"list_of_schemas  <code>instance-attribute</code>","text":"<pre><code>list_of_schemas: List[ModelSchemas]\n</code></pre>","boost":0.5},{"location":"api/fastagency/models/registry/register/","title":"register","text":"","boost":0.5},{"location":"api/fastagency/models/registry/register/#fastagency.models.registry.register","title":"fastagency.models.registry.register","text":"<pre><code>register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]\n</code></pre> Source code in <code>fastagency/models/registry.py</code> <pre><code>def register(type_name: str) -&gt; Callable[[Type[M]], Type[M]]:\n    return Registry.get_default().register(type_name)\n</code></pre>","boost":0.5},{"location":"getting-started/contributing/CONTRIBUTING/","title":"Development","text":"<p>After cloning the project, you'll need to set up the development environment. Here are the guidelines on how to do this.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#virtual-environment-with-venv","title":"Virtual Environment with <code>venv</code>","text":"<p>Create a virtual environment in a directory using Python's <code>venv</code> module:</p> <pre><code>python -m venv venv\n</code></pre> <p>That will create a <code>./venv/</code> directory with Python binaries, allowing you to install packages in an isolated environment.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#activate-the-environment","title":"Activate the Environment","text":"<p>Activate the new environment with:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Ensure you have the latest pip version in your virtual environment:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#installing-dependencies","title":"Installing Dependencies","text":"<p>After activating the virtual environment as described above, run:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install all the dependencies and your local FastAgency in your virtual environment.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#using-your-local-fastagency","title":"Using Your local FastAgency","text":"<p>If you create a Python file that imports and uses FastAgency, and run it with the Python from your local environment, it will use your local FastAgency source code.</p> <p>Whenever you update your local FastAgency source code, it will automatically use the latest version when you run your Python file again. This is because it is installed with <code>-e</code>.</p> <p>This way, you don't have to \"install\" your local version to be able to test every change.</p>","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#running-tests","title":"Running Tests","text":"","boost":3},{"location":"getting-started/contributing/CONTRIBUTING/#pytest","title":"Pytest","text":"<p>To run tests with your current FastAgency application and Python environment, use:</p> <pre><code>pytest tests\n# or\n./scripts/test.sh\n# with coverage output\n./scripts/test-cov.sh\n</code></pre> <p>In your project, you'll find some pytest marks:</p> <ul> <li>slow</li> <li>all</li> </ul> <p>By default, running pytest will execute \"not slow\" tests.</p> <p>To run all tests use:</p> <pre><code>pytest -m 'all'\n</code></pre>","boost":3},{"location":"getting-started/contributing/docs/","title":"Documentation","text":"","boost":3},{"location":"getting-started/contributing/docs/#how-to-help","title":"How to help","text":"<p>You will be of invaluable help if you contribute to the documentation.</p> <p>Such a contribution can be:</p> <ul> <li>Indications of inaccuracies, errors, typos</li> <li>Suggestions for editing specific sections</li> <li>Making additions</li> </ul> <p>You can report all this in discussions on GitHub, start issue, or write about it in our discord group.</p> <p>Note</p> <p>Special thanks to those who are ready to offer help with the case and help in developing documentation, as well as translating it into other languages.</p>","boost":3},{"location":"getting-started/contributing/docs/#how-to-get-started","title":"How to get started","text":"<p>To develop the documentation, you don't even need to install the entire FastAgency project as a whole.</p> <p>Enough:</p> <ol> <li>Clone the project repository</li> <li>Create a virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Activate it     <pre><code>source venv/bin/activate\n</code></pre></li> <li>Install documentation dependencies     <pre><code>pip install \".[devdocs]\"\n</code></pre></li> <li>Go to the <code>docs/</code> directory</li> <li>Start the local documentation server     <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now all changes in the documentation files will be reflected on your local version of the site. After making all the changes, you can issue a <code>PR</code> with them - and we will gladly accept it!</p>","boost":3}]}